{"version":3,"sources":["components/Typography.js","components/Page.js","../node_modules/reactstrap/es/CardImg.js","assets/img/bg/testscriptdev.JPG","assets/img/bg/testexecution.JPG","assets/img/bg/testmain.JPG","assets/img/bg/integration.JPG","pages/HomePage.js"],"names":["tagMap","h1","h2","h3","h4","h5","h6","p","lead","blockquote","Typography","TypoComp","Tag","tag","className","type","restProps","classes","classNames","defaultProps","bem","bn","create","Page","title","breadcrumbs","children","b","e","length","map","name","active","index","key","propTypes","tagPropType","top","PropTypes","bool","bottom","string","cssModule","object","CardImg","props","attributes","_objectWithoutPropertiesLoose","cardImgClassName","mapToCssModules","React","createElement","_extends","module","exports","APIBasePath","window","ENV","APIURL","Configuration","Component","constructor","super","toggle","modalType","this","setState","modal","state","DefaultEnvironment","defaultBrowser","checkDashboardHistoryCount","feedbackDashboardHistoryCount","DashBoardHistoryCount","checkDashboardDays","feedbackDashboardDays","DashboardDays","HubMachineName","checkHubMachineName","feedbackHubMachineName","HubPortNumber","checkHubPort","feedbackHubPort","ConfigurationFile","CommonTestData","loader","RepotingHeaderName","ReportingHeaderColCode","ReportingSubHeaderColCode","feedbackReportingHeader","checkReportingHeader","checkHeaderColCode","feedbackHeaderColCode","checkSubHeaderColCode","feedbackSubHeaderColCode","checkSenderEmail","feedbackSenderEmailAddress","SenderEmailAddress","checkSenderPassword","feedbackSenderPassword","SenderPassword","checkReceiverEmail","ReceiverEmail","feedbackReceiverEmail","a","fetch","homepage","json","homepageResponse","success","DefaultBrowser","DashboardHistoryCount","DashboardTotalDayCount","HUBMachineName","HUBPort","ReportingHeaderName","HeaderColorCode","SubHeaderColorCode","SenderEmail","GetLoaderData","UpdateEnv","event","target","value","UpdateBrowser","UpdateDashBoardHistoryCount","UpdateHubMachineName","UpdateHubPort","UpdateDashBoardDays","UpdateReportingHeaderName","UpdateHeaderColorCode","UpdateSubHeaderColorCode","UpdateSenderEmailAddress","UpdateSenderPassword","UpdateRecieverEmailAddress","SaveConfig","env","Browser","HistoryCount","DashboardDaycount","ExceptionMessage","isNaN","trim","CommonJObject","configjson","JSON","stringify","configAPI","requestOptions","method","headers","body","ORResponse","ORJson","modalValidationText","servermessage","configurationRequest","SaveHUBconfig","hub","port","SaveReportSettingconfig","headerName","headerColCode","SubheaderColCode","SaveEmailSetUp","senderEmail","Password","RecEmailAddress","render","color","height","width","timeout","visible","lg","md","sm","xs","src","testscriptdev","testexecution","testmain","integration"],"mappings":"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","file":"static/js/25.fb6cf712.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport PropTypes from 'utils/propTypes';\n\nconst tagMap = {\n  h1: 'h1',\n  h2: 'h2',\n  h3: 'h3',\n  h4: 'h4',\n  h5: 'h5',\n  h6: 'h6',\n  'display-1': 'h1',\n  'display-2': 'h1',\n  'display-3': 'h1',\n  'display-4': 'h1',\n  p: 'p',\n  lead: 'p',\n  blockquote: 'blockquote',\n};\n\nconst types = Object.keys(tagMap);\n\nconst Typography = ({ tag: Tag, className, type, ...restProps }) => {\n  const classes = classNames({ [type]: !!type }, className);\n  let TypoComp;\n\n  if (Tag) {\n    TypoComp = Tag;\n  } else if (!Tag && tagMap[type]) {\n    TypoComp = tagMap[type];\n  } else {\n    TypoComp = 'p';\n  }\n\n  return <TypoComp {...restProps} className={classes} />;\n};\n\nTypography.propTypes = {\n  tag: PropTypes.component,\n  className: PropTypes.string,\n  type: PropTypes.oneOf(types),\n};\n\nTypography.defaultProps = {\n  type: 'p',\n};\n\nexport default Typography;\n","import React from 'react';\nimport PropTypes from 'utils/propTypes';\n\nimport bn from 'utils/bemnames';\n\nimport { Breadcrumb, BreadcrumbItem } from 'reactstrap';\n\nimport Typography from './Typography';\n\nconst bem = bn.create('page');\n\nconst Page = ({\n  title,\n  breadcrumbs,\n  tag: Tag,\n  className,\n  children,\n  ...restProps\n}) => {\n  const classes = bem.b('px-3', className);\n\n  return (\n    <Tag className={classes} {...restProps}>\n      <div className={bem.e('header')}>\n        {title && typeof title === 'string' ? (\n          <Typography type=\"h1\" className={bem.e('title')}>\n            {title}\n          </Typography>\n        ) : (\n            title\n          )}\n        {breadcrumbs && (\n          <Breadcrumb className={bem.e('breadcrumb')}>\n            <BreadcrumbItem>Home</BreadcrumbItem>\n            {breadcrumbs.length &&\n              breadcrumbs.map(({ name, active }, index) => (\n                <BreadcrumbItem key={index} active={active}>\n                  {name}\n                </BreadcrumbItem>\n              ))}\n          </Breadcrumb>\n        )}\n      </div>\n      {children}\n    </Tag>\n  );\n};\n\nPage.propTypes = {\n  tag: PropTypes.component,\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  className: PropTypes.string,\n  children: PropTypes.node,\n  breadcrumbs: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      active: PropTypes.bool,\n    })\n  ),\n};\n\nPage.defaultProps = {\n  tag: 'div',\n  title: '',\n};\n\nexport default Page;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  top: PropTypes.bool,\n  bottom: PropTypes.bool,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'img'\n};\n\nvar CardImg = function CardImg(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      top = props.top,\n      bottom = props.bottom,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"top\", \"bottom\", \"tag\"]);\n\n  var cardImgClassName = 'card-img';\n\n  if (top) {\n    cardImgClassName = 'card-img-top';\n  }\n\n  if (bottom) {\n    cardImgClassName = 'card-img-bottom';\n  }\n\n  var classes = mapToCssModules(classNames(className, cardImgClassName), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nCardImg.propTypes = propTypes;\nCardImg.defaultProps = defaultProps;\nexport default CardImg;","module.exports = __webpack_public_path__ + \"static/media/testscriptdev.ef00e36d.JPG\";","module.exports = __webpack_public_path__ + \"static/media/testexecution.e1f70852.JPG\";","module.exports = __webpack_public_path__ + \"static/media/testmain.6b460da0.JPG\";","module.exports = __webpack_public_path__ + \"static/media/integration.344753cd.JPG\";","import Page from 'components/Page';\nimport React from 'react';\nimport testscriptdev from 'assets/img/bg/testscriptdev.JPG';\nimport testexecution from 'assets/img/bg/testexecution.JPG';\nimport testmain from 'assets/img/bg/testmain.JPG';\nimport integration from 'assets/img/bg/integration.JPG';\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  Col,\n  Form,\n  FormGroup,\n  Input,\n  Label,\n  Row,\n  FormFeedback,\n  Modal,\n  ModalBody,\n  ModalFooter,\n  ModalHeader,\n  CardImg,\n} from 'reactstrap';\nimport Loader from 'react-loader-spinner'\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\nvar APIBasePath= window.ENV.APIURL;\n\nfunction Options({ options }) {\n    return (\n        options.map(option => \n                    <option key={option.Environment}>                                   \n                    {option.Environment}\n                    </option>)\n                   );\n}\n\n\n\nclass Configuration extends React.Component{\n\n  constructor(props){\n    super(props);\n    this.state=\n    {\n       DefaultEnvironment : '',\n       defaultBrowser : '',\n       checkDashboardHistoryCount:false,\n       feedbackDashboardHistoryCount:'',\n       DashBoardHistoryCount:'',\n       checkDashboardDays:false,\n       feedbackDashboardDays:'',\n       DashboardDays:'',\n       HubMachineName:'',\n       checkHubMachineName:false,\n       feedbackHubMachineName:'',\n       HubPortNumber:'',\n       checkHubPort:false,\n       feedbackHubPort:'',\n       ConfigurationFile:[],\n       CommonTestData:[],\n       loader:true,\n       RepotingHeaderName:'',\n       ReportingHeaderColCode:'',\n       ReportingSubHeaderColCode:'',\n       feedbackReportingHeader:'',\n       checkReportingHeader:false,\n       checkHeaderColCode :false,\n       feedbackHeaderColCode:'',\n       checkSubHeaderColCode:false,\n       feedbackSubHeaderColCode:'',\n       checkSenderEmail:false,\n       feedbackSenderEmailAddress:'',\n       SenderEmailAddress:'',\n       checkSenderPassword:false,\n       feedbackSenderPassword:'',\n       SenderPassword:'',\n       checkReceiverEmail:false,\n       ReceiverEmail:'',\n       feedbackReceiverEmail:'',\n\n    }\n    const GetLoaderData = async () => \n    {\n      const homepage = await fetch(APIBasePath+'dashboard');\n      const homepageResponse = await homepage.json();\n      if(homepageResponse.success)\n      {\n          this.setState({ConfigurationFile:homepageResponse.Configuration});\n          this.setState({CommonTestData:homepageResponse.CommonTestData});\n          this.setState({DefaultEnvironment : this.state.ConfigurationFile.DefaultEnvironment});\n          this.setState({defaultBrowser : this.state.ConfigurationFile.DefaultBrowser});\n          this.setState({DashBoardHistoryCount:this.state.ConfigurationFile.DashboardHistoryCount});\n          this.setState({DashboardDays:this.state.ConfigurationFile.DashboardTotalDayCount});\n          this.setState({HubMachineName:this.state.ConfigurationFile.HUBMachineName});\n          this.setState({HubPortNumber:this.state.ConfigurationFile.HUBPort});\n          this.setState({RepotingHeaderName:this.state.ConfigurationFile.ReportingHeaderName});\n          this.setState({ReportingHeaderColCode:this.state.ConfigurationFile.HeaderColorCode});\n          this.setState({ReportingSubHeaderColCode:this.state.ConfigurationFile.SubHeaderColorCode});\n          this.setState({SenderEmailAddress:this.state.ConfigurationFile.SenderEmail});\n          this.setState({SenderPassword:this.state.ConfigurationFile.SenderPassword});\n          this.setState({ReceiverEmail:this.state.ConfigurationFile.ReceiverEmail});\n          this.setState({loader:false});\n      }\n    }\n    GetLoaderData();\n    \n  }\n  UpdateEnv(event)\n  {\n    \n    this.setState({DefaultEnvironment: event.target.value})\n    \n  }\n  UpdateBrowser(event)\n  {\n    \n    this.setState({defaultBrowser: event.target.value})\n    \n  }\n\n  UpdateDashBoardHistoryCount(event)\n  {\n    \n    this.setState({checkDashboardHistoryCount: false})\n    this.setState({DashBoardHistoryCount: event.target.value})\n    \n  }\n\n  UpdateHubMachineName(event)\n  {\n    \n    this.setState({checkHubMachineName: false})\n    this.setState({HubMachineName: event.target.value})\n    \n  }\n  \n  UpdateHubPort(event)\n  {\n    \n    this.setState({checkHubPort: false})\n    this.setState({HubPortNumber: event.target.value})\n    \n  }\n  UpdateDashBoardDays(event)\n  {\n    \n    this.setState({checkDashboardDays: false})\n    this.setState({DashboardDays: event.target.value})\n    \n  }\n  UpdateReportingHeaderName(event)\n  {\n    \n    this.setState({checkReportingHeader: false})\n    this.setState({feedbackReportingHeader: ''})\n    this.setState({RepotingHeaderName: event.target.value})\n  }\n\n  UpdateHeaderColorCode(event)\n  {\n    \n    this.setState({checkHeaderColCode: false})\n    this.setState({feedbackHeaderColCode: ''})\n    this.setState({ReportingHeaderColCode: event.target.value})\n  }\n  UpdateSubHeaderColorCode(event)\n  {\n    \n    this.setState({checkSubHeaderColCode: false})\n    this.setState({feedbackSubHeaderColCode: ''})\n    this.setState({ReportingSubHeaderColCode: event.target.value})\n  }\n\n  UpdateSenderEmailAddress(event)\n  {\n    \n    this.setState({checkSenderEmail: false})\n    this.setState({feedbackSenderEmailAddress: ''})\n    this.setState({SenderEmailAddress: event.target.value})\n  }\n  UpdateSenderPassword(event)\n  {\n    \n    this.setState({checkSenderPassword: false})\n    this.setState({feedbackSenderPassword: ''})\n    this.setState({SenderPassword: event.target.value})\n  }\n  UpdateRecieverEmailAddress(event)\n  {\n    \n    this.setState({checkReceiverEmail: false})\n    this.setState({feedbackReceiverEmail: ''})\n    this.setState({ReceiverEmail: event.target.value})\n  }\n  SaveConfig()\n  {\n     var env = this.state.DefaultEnvironment;\n     var Browser = this.state.defaultBrowser;\n     var HistoryCount = this.state.DashBoardHistoryCount;\n     var DashboardDaycount = this.state.DashboardDays;\n     var ExceptionMessage ='';\n     if(isNaN(HistoryCount) || HistoryCount.trim()===\"\")\n     {\n      this.setState({checkDashboardHistoryCount:true})\n      this.setState({feedbackDashboardHistoryCount:'Dashboard History Count* takes only numeric value.'})\n      ExceptionMessage= ExceptionMessage+ 'Dashboard History Count* takes only numeric value..'\n     }\n     if(isNaN(DashboardDaycount) || DashboardDaycount.trim()==='')\n     {\n      this.setState({checkDashboardDays:true})\n      this.setState({feedbackDashboardDays:'Dashboard Total Day Count* takes only numeric value.'})\n      ExceptionMessage= ExceptionMessage+ 'Dashboard Total Day Count* takes only numeric value..'\n     }\n     if(ExceptionMessage.trim() !==\"\")\n     {\n      // this.setState({modal:true})\n       return ;\n     }\n     this.setState({loader:true})\n     var CommonJObject ={};\n     CommonJObject[\"DefaultEnvironment\"]=env;\n     CommonJObject[\"DefaultBrowser\"]=Browser;\n     CommonJObject[\"DashboardHistoryCount\"]=HistoryCount;\n     CommonJObject[\"DashboardTotalDayCount\"]=DashboardDaycount;\n\n     var configjson = JSON.stringify(CommonJObject)\n     var configAPI =APIBasePath+'configuration';\n     var requestOptions = {\n       method: 'POST',\n      headers: {\"Accept\": \"application/json; odata=verbose\",'Content-type': 'application/x-www-form-urlencoded'},\n       body: configjson\n     };\n     const configurationRequest = async () => \n     {\n       const ORResponse = await fetch(configAPI,requestOptions);\n       const ORJson = await ORResponse.json();\n       this.setState({loader:false})\n       this.setState({modal:true})\n       this.setState({modalValidationText:ORJson.servermessage})\n     }\n     configurationRequest();\n\n  }\n\n  SaveHUBconfig()\n  {\n    var ExceptionMessage='';\n    var hub = this.state.HubMachineName;\n    var port = this.state.HubPortNumber;\n    if(hub.trim()===\"\")\n    {\n     this.setState({checkHubMachineName:true})\n     this.setState({feedbackHubMachineName:'Hub Machine Name* can not be blank'})\n     ExceptionMessage= ExceptionMessage+ 'Hub Machine Name* can not be blank'\n    }\n    if(isNaN(port))\n    {\n     this.setState({checkHubPort:true})\n     this.setState({feedbackHubPort:'Port Number* takes only numeric value.'})\n     ExceptionMessage= ExceptionMessage+ 'Port Number* takes only numeric value..'\n    }\n    if(port.trim()===\"\")\n    {\n     this.setState({checkHubPort:true})\n     this.setState({feedbackHubPort:'Port Number* can not be blank'})\n     ExceptionMessage= ExceptionMessage+ 'Port Number* can not be blank'\n    }\n    if(ExceptionMessage.trim() !==\"\")\n    {\n      return ;\n    }\n    this.setState({loader:true})\n    var CommonJObject ={};\n    CommonJObject[\"HUBMachineName\"]=hub;\n    CommonJObject[\"HUBPort\"]=port;\n    var configjson = JSON.stringify(CommonJObject)\n    var configAPI =APIBasePath+'configuration?id=1';\n    var requestOptions = {\n      method: 'POST',\n     headers: {\"Accept\": \"application/json; odata=verbose\",'Content-type': 'application/x-www-form-urlencoded'},\n      body: configjson\n    };\n    const configurationRequest = async () => \n    {\n      const ORResponse = await fetch(configAPI,requestOptions);\n      const ORJson = await ORResponse.json();\n      this.setState({loader:false})\n      this.setState({modal:true})\n      this.setState({modalValidationText:ORJson.servermessage})\n      \n      \n    }\n    configurationRequest();\n  }\n\n  SaveReportSettingconfig()\n  {\n    var ExceptionMessage='';\n    var headerName = this.state.RepotingHeaderName;\n    var headerColCode = this.state.ReportingHeaderColCode;\n    var SubheaderColCode = this.state.ReportingSubHeaderColCode;\n    if(headerName.trim()===\"\")\n    {\n     this.setState({checkReportingHeader:true})\n     this.setState({feedbackReportingHeader:'Reporting Header Name* can not be blank'})\n     ExceptionMessage= 'Reporting Header Name* can not be blank';\n    }\n    if(headerColCode.trim()===\"\")\n    {\n     this.setState({checkHeaderColCode:true})\n     this.setState({feedbackHeaderColCode:'Header Color Code* can not be blank'})\n     ExceptionMessage= ExceptionMessage+ 'Header Color Code* can not be blank';\n    }\n    if(SubheaderColCode.trim()===\"\")\n    {\n     this.setState({checkSubHeaderColCode:true})\n     this.setState({feedbackSubHeaderColCode:'SubHeader Color Code* can not be blank'})\n     ExceptionMessage= ExceptionMessage+ 'SubHeader Color Code* can not be blank';\n    }\n    if(ExceptionMessage.trim() !==\"\")\n    {\n      return ;\n    }\n    this.setState({loader:true})\n    var CommonJObject ={};\n    CommonJObject[\"ReportingHeaderName\"]=headerName;\n    CommonJObject[\"HeaderColorCode\"]=headerColCode;\n    CommonJObject[\"SubHeaderColorCode\"]=SubheaderColCode;\n    var configjson = JSON.stringify(CommonJObject)\n    var configAPI =APIBasePath+'configuration?id=2';\n    var requestOptions = {\n      method: 'POST',\n     headers: {\"Accept\": \"application/json; odata=verbose\",'Content-type': 'application/x-www-form-urlencoded'},\n      body: configjson\n    };\n    const configurationRequest = async () => \n    {\n      const ORResponse = await fetch(configAPI,requestOptions);\n      const ORJson = await ORResponse.json();\n      this.setState({loader:false})\n      this.setState({modal:true})\n      this.setState({modalValidationText:ORJson.servermessage})\n\n    }\n    configurationRequest();\n  }\n\n  SaveEmailSetUp()\n  {\n    var ExceptionMessage='';\n    var senderEmail = this.state.SenderEmailAddress;\n    var Password = this.state.SenderPassword;\n    var RecEmailAddress = this.state.ReceiverEmail;\n    if(senderEmail.trim()===\"\")\n    {\n     this.setState({checkSenderEmail:true})\n     this.setState({feedbackSenderEmailAddress:'Sender Email Address* can not be blank'})\n     ExceptionMessage= 'Sender Email Address* can not be blank';\n    }\n    if(Password.trim()===\"\")\n    {\n     this.setState({checkSenderPassword:true})\n     this.setState({feedbackSenderPassword:'Password* can not be blank'})\n     ExceptionMessage= ExceptionMessage+ 'Password* can not be blank';\n    }\n    if(RecEmailAddress.trim()===\"\")\n    {\n     this.setState({checkReceiverEmail:true})\n     this.setState({feedbackReceiverEmail:'Receiver Email Address* can not be blank'})\n     ExceptionMessage= ExceptionMessage+ 'Receiver Email Address* can not be blank';\n    }\n    if(ExceptionMessage.trim() !==\"\")\n    {\n      return ;\n    }\n    this.setState({loader:true})\n    var CommonJObject ={};\n    CommonJObject[\"SenderEmail\"]=senderEmail;\n    CommonJObject[\"SenderPassword\"]=Password;\n    CommonJObject[\"ReceiverEmail\"]=RecEmailAddress;\n    var configjson = JSON.stringify(CommonJObject)\n    var configAPI =APIBasePath+'configuration?id=3';\n    var requestOptions = {\n      method: 'POST',\n     headers: {\"Accept\": \"application/json; odata=verbose\",'Content-type': 'application/x-www-form-urlencoded'},\n      body: configjson\n    };\n    const configurationRequest = async () => \n    {\n      const ORResponse = await fetch(configAPI,requestOptions);\n      const ORJson = await ORResponse.json();\n      this.setState({loader:false})\n      this.setState({modal:true})\n      this.setState({modalValidationText:ORJson.servermessage})\n\n    }\n    configurationRequest();\n  }\n\n  toggle = modalType => () => {\n    if (!modalType) {\n      return this.setState({\n        modal: !this.state.modal,\n      });\n    }\n\n    this.setState({\n      [`modal_${modalType}`]: !this.state[`modal_${modalType}`],\n    });\n  };\n\n  render() {\n\n  return (\n    <Page title=\"QA Automator\" >\n      <Loader \n        type=\"ThreeDots\"\n        color=\"#00BFFF\"\n        height={50}\n        width={100}\n        timeout={120000} //3 secs\n        visible = {this.state.loader}\n      />\n\t <Row>\n        <Col lg={12} md={12} sm={12} xs={12}>\n          <div>\n          QA Automator is complete testing solution for Web and API testing.\n          It is codeless automation framework on cloud platform with artificial intelligence \n          Support which reduce 90% business cost.\n\n          </div>\n        </Col>\n        <Col lg={6} md={6} sm={6} xs={6}>\n        <CardImg\n         className=\"card-img-right\"\n         src={testscriptdev}\n        />\n        <CardImg\n        />\n      </Col>\n      <Col lg={6} md={6} sm={6} xs={6}>\n        <CardImg\n         className=\"card-img-right\"\n         src={testexecution}\n        />\n        <CardImg\n        />\n      </Col>\n      <Col lg={6} md={6} sm={6} xs={6}>\n        <CardImg\n         className=\"card-img-right\"\n         src={testmain}\n        />\n        <CardImg\n        />\n      </Col>\n      <Col lg={6} md={6} sm={6} xs={6}>\n        <CardImg\n         className=\"card-img-right\"\n         src={integration}\n        />\n        <CardImg\n        />\n      </Col>\n      </Row>\n    </Page>\n  );\n  }\n};\n\nexport default Configuration;\n"],"sourceRoot":""}