{"version":3,"sources":["components/Typography.js","pages/funcLibraries/GenericHelper.js","components/Page.js","assets/img/bg/deleterow.JPG","assets/img/bg/addnewrow.JPG","pages/funcLibraries/executionHelper.js","pages/Web/TestData.js"],"names":["tagMap","h1","h2","h3","h4","h5","h6","p","lead","blockquote","Typography","TypoComp","Tag","tag","className","type","restProps","classes","classNames","defaultProps","common_deleteIteminJarrayBasedonIndex","Item","index","key","testData","filter","m","id","i","length","error","common_AddIteminJarrayBasedonIndex","keyList","allItem","Number","NewItemContent","push","common_checkblankvalueinJarray","trim","common_CheckValueFromJson","options","checkvalue","allitem","Object","keys","map","toLowerCase","common_GetListvalueFromJsonResponce","common_GetListKeyFromJsonResponce","common_ChangeJsoncontentforServer","ItemValue","valueaf","includes","split","join","checkJsonFormat","sampleJSON","JSON","parse","Exception","getListItem","Input","labelName","common_RemoveItesmfromListinJobject","ListItem","RemoveItem","count","outputData","keyName","bem","bn","create","Page","title","breadcrumbs","children","b","e","name","active","module","exports","getExecutionStatusListValue","allModuleName","alltestscripts","parameter","output","moduleName","totalval","j","status","GetListOfListItemforCommonItem","JsonItems","CommonDataItem","testdata","commonKeyName","commonKeyValue","GetListOfListforActionName","value","label","GetModule","TestSuite","Index","executableTestscript","GetTestID","testid","GetTestName","testcasename","TestInformationForTestSummaryReports","Mo","testID","testName","Status","reportPath","duration","jstestStepData","APIBasePath","window","ENV","APIURL","Options","option","Environment","GetAllModule","TestData","React","Component","constructor","props","super","addNewCommonData","this","state","modEnv","ItemCount","setState","modal","modalValidationText","loader","lastOneId","checkmodEnv","deleteCommonData","selectedrowid","selectedCommonID","commontestDataItems","handleOnSelect","row","isSelect","selectedrow","handleOnSelectForTestData","selectedTestData","addNewTestDataRow","ItemList","testDataItemrowList","ColList","testDatacolumns","loaderTestData","selectedID","UpdatedRow","parseInt","deleteTestDataRow","toggle","modalType","envEnv","testdataEnv","checkenvEnv","envCopy","checkenvCopy","envRename","checkenvRename","CommonDataTotalSize","CommonTestDataChange","testDataModule","checkTestDataEnv","checkTestDataModule","PreviousTestDataState","CommonTestData","pageloadingStatus","a","fetch","homepage","json","homepageResponse","GetLoaderData","SelectenvEnv","event","target","SaveModuleTestData","tesEnv","tesModule","Message","NewItemList","newContent","text","APIBody","genericHelper","console","log","API","requestOptions","method","headers","body","stringify","APIResponse","APIResponseJson","servermessage","SaveTestDataRequest","SelectTestDataEnv","TEnv","oldEnv","toString","ModuleResponce","ModuleList","SelectTestDataModule","TestDModule","OldModule","keyValNew","TestEn","TotalHeader","testDataFile","Req1","Response1","allTestID","allTestIDcontent","TestDataFromID","testDataHeaderCol","dataField","allRowItem","counter","TestID","CheckData","TestDataIteration1","RowList","k","undefined","err","Request1","SelectenvCopy","envcopyvalue","SelectenvRename","DeleteEnv","env","ORAPI","ORResponse","ORJson","success","DeleteEnvReq","CreateNewEnvCopy","ExceptionMessage","envName","NewEnvCopy","SaveCommonTestData","commonTestDataItem","CommonJObject","ORjson","commonDataRequest","SelectmodEnv","onchangeenvvalue","URL","executionHelper","RenameEnv","render","selectRow","mode","onSelect","selectRowforTestData","sizePerPage","hideSizePerPage","hidePageListOnlyOnePage","columns","headerStyle","width","Cell","textFilter","validator","newValue","column","valid","message","totalCount","color","height","timeout","visible","lg","md","sm","xs","inline","for","disabled","invalid","onChange","bind","selected","onClick","isOpen","placeholder","src","bg1Image","style","bg3Image","keyField","data","striped","hover","condensed","pagination","paginationFactory","rowEvents","rowIndex","onDataSizeChange","handleDataChange","filterFactory","cellEdit","cellEditFactory","blurToSave","afterSaveCell","oldValue"],"mappings":"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","file":"static/js/26.06256592.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport PropTypes from 'utils/propTypes';\n\nconst tagMap = {\n  h1: 'h1',\n  h2: 'h2',\n  h3: 'h3',\n  h4: 'h4',\n  h5: 'h5',\n  h6: 'h6',\n  'display-1': 'h1',\n  'display-2': 'h1',\n  'display-3': 'h1',\n  'display-4': 'h1',\n  p: 'p',\n  lead: 'p',\n  blockquote: 'blockquote',\n};\n\nconst types = Object.keys(tagMap);\n\nconst Typography = ({ tag: Tag, className, type, ...restProps }) => {\n  const classes = classNames({ [type]: !!type }, className);\n  let TypoComp;\n\n  if (Tag) {\n    TypoComp = Tag;\n  } else if (!Tag && tagMap[type]) {\n    TypoComp = tagMap[type];\n  } else {\n    TypoComp = 'p';\n  }\n\n  return <TypoComp {...restProps} className={classes} />;\n};\n\nTypography.propTypes = {\n  tag: PropTypes.component,\n  className: PropTypes.string,\n  type: PropTypes.oneOf(types),\n};\n\nTypography.defaultProps = {\n  type: 'p',\n};\n\nexport default Typography;\n","export default\n{\n    common_deleteIteminJarrayBasedonIndex(Item,index,key) \n    {\n        try{\n            var testData = Item.filter(m => m.id !== index);\n            for(let i=index;i<=testData.length;i++)\n            {\n                testData[i-1][key]=i;\n            }\n            return testData;\n        }\n        catch(error)\n        {}\n        return Item;\n    },\n    common_AddIteminJarrayBasedonIndex(Item,index,keyList,key) \n    {\n        try{\n            var allItem=[]\n            for(let i=0;i<Number(index);i++)\n            {\n                allItem[i]= Item[i];\n            }\n            var NewItemContent ={};\n            for(let i=0;i<keyList.length;i++)\n            {\n                NewItemContent[keyList[i]]='';\n            }\n            NewItemContent[key]=Number(index)+1;\n            allItem.push(NewItemContent)\n            for(let i=Number(index);i<Item.length;i++)\n            {\n                Item[i]['id']=Number(i)+2;\n                allItem.push(Item[i]);\n            }\n            return allItem;\n        }\n        catch(error)\n        {}\n        return Item;\n    },\n\n    common_checkblankvalueinJarray(Item,key) \n    {\n        try{\n            for(let i=0;i<=Item.length;i++)\n            {\n                if(Item[i][key].trim()==='')\n                {\n                    return true\n                }\n            }\n            return false;\n        }\n        catch(error)\n        {}\n        return false;\n    },\n\n    common_CheckValueFromJson( options,checkvalue) \n    {\n     let allitem = []\n     Object.keys(options).map((key) => (\n      allitem.push(options[key])\n    ));\n    for (let i = 0; i < allitem.length; i++) \n    {\n      if(allitem[i].trim().toLowerCase()===checkvalue.trim().toLowerCase())\n      {\n        return true;\n      }\n    }\n    return false;\n    },\n\n    common_GetListvalueFromJsonResponce(options) \n    {\n        let allitem = [];\n        try{\n            Object.keys(options).map((key) => (\n            allitem.push(options[key])\n            ));\n            }\n        catch(error)\n        {}\n        return allitem;\n    },\n    common_GetListKeyFromJsonResponce(options) \n    {\n        let allitem = []\n        Object.keys(options).map((key) => (\n        allitem.push(key)\n        ));\n        return allitem;\n    },\n\n    common_ChangeJsoncontentforServer(ItemValue)\n    {\n    try{\n        var valueaf =[];\n    if(ItemValue.includes(\"+\"))\n    {\n        valueaf = ItemValue.split('+')\n        ItemValue= valueaf.join('auplussignau')\n    }\n    if(ItemValue.includes(\":\"))\n    {\n        valueaf = ItemValue.split(':')\n        ItemValue= valueaf.join('aucolumnsignau')\n    }\n    if(ItemValue.includes(\"{\"))\n    {\n        valueaf = ItemValue.split('{')\n        ItemValue= valueaf.join('aucurlyopenbracketau')\n    }\n    if(ItemValue.includes(\"}\"))\n    {\n        valueaf = ItemValue.split('}')\n        ItemValue= valueaf.join('aucurlyclosebracketau')\n    }\n    if(ItemValue.includes(\"[\"))\n    {\n        valueaf = ItemValue.split('[')\n        ItemValue= valueaf.join('aubigopenbracketau')\n    }\n    if(ItemValue.includes(\"]\"))\n    {\n        valueaf = ItemValue.split(']')\n        ItemValue= valueaf.join('aubigclosebracketau')\n    }\n    if(ItemValue.includes('\"'))\n    {\n        valueaf = ItemValue.split('\"')\n        ItemValue= valueaf.join('audoublequotesau')\n    }\n    if(ItemValue.includes(\"=\"))\n    {\n        valueaf = ItemValue.split('=')\n        ItemValue= valueaf.join('auequalsignau')\n    }\n    }\n    catch(error)\n    {}\n    return ItemValue;\n    },\n\n    checkJsonFormat(sampleJSON)\n    {\n        if(sampleJSON.trim()==='')\n        {\n          return true;\n        }\n        try{\n         JSON.parse(sampleJSON);\n         return true;\n        }\n        catch(Exception)\n        {}\n        return false;\n    },\n    getListItem(Input,labelName)\n    {\n      let allitem = [];\n      try{\n      for(let i =0;i<Object.keys(Input).length;i++)\n      {\n          allitem.push(Input[i][labelName])\n      }\n      }\n      catch(error)\n      {}\n      return allitem;\n    },\n\n     common_RemoveItesmfromListinJobject(ListItem,RemoveItem) \n    {\n  let count = Object.keys(ListItem).length;\n  let outputData={};\n  for(let i=1;i<=count;i++)\n  {\n\tvar keyName =Object.keys(ListItem)[i-1];\n\tif(keyName.trim().toLowerCase()!==RemoveItem.trim().toLowerCase())\n\t{\n\t\toutputData[keyName]=ListItem[keyName];\n\t}\n\t\n  }\n  return outputData;\n}\n\n}\n\n","import React from 'react';\nimport PropTypes from 'utils/propTypes';\n\nimport bn from 'utils/bemnames';\n\nimport { Breadcrumb, BreadcrumbItem } from 'reactstrap';\n\nimport Typography from './Typography';\n\nconst bem = bn.create('page');\n\nconst Page = ({\n  title,\n  breadcrumbs,\n  tag: Tag,\n  className,\n  children,\n  ...restProps\n}) => {\n  const classes = bem.b('px-3', className);\n\n  return (\n    <Tag className={classes} {...restProps}>\n      <div className={bem.e('header')}>\n        {title && typeof title === 'string' ? (\n          <Typography type=\"h1\" className={bem.e('title')}>\n            {title}\n          </Typography>\n        ) : (\n            title\n          )}\n        {breadcrumbs && (\n          <Breadcrumb className={bem.e('breadcrumb')}>\n            <BreadcrumbItem>Home</BreadcrumbItem>\n            {breadcrumbs.length &&\n              breadcrumbs.map(({ name, active }, index) => (\n                <BreadcrumbItem key={index} active={active}>\n                  {name}\n                </BreadcrumbItem>\n              ))}\n          </Breadcrumb>\n        )}\n      </div>\n      {children}\n    </Tag>\n  );\n};\n\nPage.propTypes = {\n  tag: PropTypes.component,\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  className: PropTypes.string,\n  children: PropTypes.node,\n  breadcrumbs: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      active: PropTypes.bool,\n    })\n  ),\n};\n\nPage.defaultProps = {\n  tag: 'div',\n  title: '',\n};\n\nexport default Page;\n","module.exports = __webpack_public_path__ + \"static/media/deleterow.9eb1ed86.JPG\";","module.exports = __webpack_public_path__ + \"static/media/addnewrow.11af4dc5.JPG\";","export default\n{\n   getExecutionStatusListValue(allModuleName,alltestscripts,parameter) {\n     var output =[];\n     for(let i=0;i<allModuleName.length;i++)\n     {\n       const moduleName = allModuleName[i];\n       var totalval=0;\n       for(let j=0;j<alltestscripts.length;j++)\n       {\n        const runTimeModule = alltestscripts[j].moduleName;\n        if(runTimeModule===moduleName)\n        {\n          const status= alltestscripts[j].status;\n          if(status.toLowerCase().includes(parameter.toLowerCase()))\n          {\n            totalval=Number(totalval)+1;\n          }\n        }\n       }\n       output.push(totalval);\n     }\n     return output;\n\n  },\n\n  GetListOfListItemforCommonItem(JsonItems) \n{\n  let count = Object.keys(JsonItems).length;\n  let CommonDataItem=[];\n  for(let i=1;i<=count;i++)\n  {\n\tvar keyName =Object.keys(JsonItems)[i-1];\n\tvar keyVal =JsonItems[keyName];\n\tvar  testdata={id:i,commonKeyName:keyName,commonKeyValue:keyVal};\n\tCommonDataItem.push(testdata);\n  }\n  return CommonDataItem;\n},\n\nGetListOfListforActionName(JsonItems) \n{\n  let count = Object.keys(JsonItems).length;\n  let CommonDataItem=[];\n  for(let i=1;i<=count;i++)\n  {\n\tvar keyName =Object.keys(JsonItems)[i-1];\n\tvar  testdata={value:keyName,label:keyName};\n\tCommonDataItem.push(testdata);\n  }\n  return CommonDataItem;\n},\n GetModule(TestSuite,Index,executableTestscript)\n{\n  var Mo= TestSuite[executableTestscript[Index]-1].moduleName;\n  return Mo;\n},\nGetTestID(TestSuite,Index,executableTestscript)\n{\n  var testID =TestSuite[executableTestscript[Index]-1].testid;\n  return testID;\n},\nGetTestName(TestSuite,Index,executableTestscript)\n{\n  var testName= TestSuite[executableTestscript[Index]-1].testcasename;\n  return testName;\n},\nTestInformationForTestSummaryReports(Mo,testID,testName,Status,reportPath,duration)\n{\n  var jstestStepData={};\n  jstestStepData[\"Module\"]=Mo;\n  jstestStepData[\"testid\"]=testID\n  jstestStepData[\"testcasename\"]=testName;\n  jstestStepData[\"status\"]=Status;\n  reportPath= reportPath.split('\\\\').join('{')\n  jstestStepData[\"reportpath\"]=reportPath;\n  jstestStepData[\"duration\"]=duration;\n  return jstestStepData;\n}\n}\n\n","import Page from 'components/Page';\nimport React from 'react';\nimport bg3Image from 'assets/img/bg/deleterow.JPG';\nimport bg1Image from 'assets/img/bg/addnewrow.JPG';\nimport genericHelper from '../funcLibraries/GenericHelper.js';\nimport executionHelper from '../funcLibraries/executionHelper.js';\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  Col,\n  Form,\n  FormGroup,\n  Input,\n  Label,\n  Row,\n  CardImg,\n  Modal,\n  ModalBody,\n  ModalFooter,\n  ModalHeader,\n} from 'reactstrap';\nimport Loader from 'react-loader-spinner';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\nimport cellEditFactory from 'react-bootstrap-table2-editor';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport filterFactory, { textFilter } from 'react-bootstrap-table2-filter';\n\nvar APIBasePath= window.ENV.APIURL;\n\nfunction Options({ options }) {\n    return (\n        options.map(option => \n                    <option key={option.Environment}>                                   \n                    {option.Environment}\n                    </option>)\n                   );\n}\nfunction GetAllModule({ options }) {\n\n\treturn (\n\t  Object.keys(options).map((key)  => \n\t  <option >{options[key]}</option>)\n\t);\n\t\n  }\nclass TestData extends React.Component{\n\n\tconstructor(props)\n\t{\n\t\tsuper(props);\n\t\tthis.state=\n\t\t{\n\t\t\tenvEnv:'',\n\t\t\ttestdataEnv:'',\n\t\t\tcheckenvEnv:false,\n\t\t\tenvCopy:'',\n\t\t\tcheckenvCopy:false,\n\t\t\tenvRename:'',\n\t\t\tcheckenvRename:false,\n\t\t\tCommonDataItem: [],\n\t\t\tmodEnv:'',\n\t\t\tcheckmodEnv:false,\n\t\t\tCommonDataTotalSize:0,\n\t\t\tCommonTestDataChange: false,\n\t\t\tselectedCommonID:0,\n\t\t\tselectedTestData:0,\n\t\t\ttestDataModule:'',\n\t\t\tallModuleName: [],\n\t\t\ttestDatacolumns :[{}],\n\t\t\ttestDataItemrowList:[],\n\t\t\tcheckTestDataEnv:false,\n\t\t\tcheckTestDataModule:false,\n\t\t\tPreviousTestDataState:[],\n\t\t\tCommonTestData:[],\n\t\t\tloader:true,\n\t\t\tloaderTestData:false,\n\t\t\tpageloadingStatus :false,\n\t\t}\n\n\t\tconst GetLoaderData = async () => \n\t\t{\n\t\t\tthis.setState({pageloadingStatus:true});\n\t\t  const homepage = await fetch(APIBasePath+'dashboard');\n\t\t  const homepageResponse = await homepage.json();\n\t\t  this.setState({CommonTestData:homepageResponse.CommonTestData});\n\t\t  this.setState({loader:false});\n\t\t  this.setState({pageloadingStatus:false});\n\t\t}\n\t\tGetLoaderData();\n\t\t\n\t}\n\n\tSelectenvEnv(event)\n\t{\n\t  \n\t  this.setState({envEnv: event.target.value})\n\t  \n\t}\n\tSaveModuleTestData()\n\t{\n\t\tvar tesEnv = this.state.testdataEnv;\n\t\tvar tesModule = this.state.testDataModule;\n\t\tvar Message='';\n\t\tif(tesEnv.trim()===\"\")\n\t\t{\n\t\t\tthis.setState({checkTestDataEnv:true})\n\t\t\tMessage='Environment can not be blank';\n\t\t}\n\t\tif(tesModule.trim()===\"\")\n\t\t{\n\t\t\tthis.setState({checkTestDataModule:true})\n\t\t\tMessage='Module can not be blank';\n\t\t}\n\t\tif(Message.trim()!==\"\")\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\tvar ItemList = this.state.testDataItemrowList;\n\t\tvar ColList = this.state.testDatacolumns;\n\t\tif(ItemList.length===0)\n\t\t{\n\t\t\tthis.setState({modal:true})\n\t\t    return this.setState({modalValidationText:'Please add the test data information.'});\n\t\t}\n\t\tif(ColList.length===1 || ColList.length===0)\n\t\t{\n\t\t\tthis.setState({modal:true})\n\t\t    return this.setState({modalValidationText:'Please add the test data information.'});\n\t\t}\n\t\tfor(let i=0;i<ItemList.length;i++)\n\t\t{\n\t\t\tvar testIDName= ItemList[i]['testdatacolid1'];\n\t\t\tif(testIDName.trim() ===\"\")\n\t\t\t{\n\t\t\t\tthis.setState({modal:true})\n\t\t\t\treturn this.setState({modalValidationText:'Please add the test data information for record number '+(i+1)+', before saving the record.'});\n\t\t\t}\n\t\t}\n\t\tthis.setState({loaderTestData:true})\n\t\tvar NewItemList=[];\n\t\t\n\t\tfor(let i=0;i<ItemList.length;i++)\n\t\t{\n\t\t\tvar newContent={}\n\t\t\tnewContent['id']=i+1;\n\t\t\tfor(let j=1;j<ColList.length;j++)\n\t\t\t{\n\t\t\t\tnewContent[ColList[j].text]=ItemList[i]['testdatacolid'+j]\n\t\t\t}\n\t\t\tNewItemList.push(newContent);\n\t\t}\n\t\t//@ Post Request Send for Save Test Data.\n\t\t//console.log(NewItemList)\n\t\tvar APIBody = genericHelper.common_ChangeJsoncontentforServer(NewItemList);\n\t\tconsole.log(APIBody);\n\n\t\t//var APIBody = JSON.stringify({QA:1})\n\t\tvar API =APIBasePath+'testdata/'+tesEnv+'/'+tesModule;\n        var requestOptions = {\n          method: 'POST',\n          headers: {\"Accept\": \"*/*\",'Content-type': 'application/json'},\n      \t  body: JSON.stringify(APIBody)\n        };\n        const SaveTestDataRequest = async () => \n        {\n\t\t\tthis.setState({pageloadingStatus:true});\n          const APIResponse = await fetch(API,requestOptions);\n\t\t  const APIResponseJson = await APIResponse.json();\n\t\t  this.setState({loaderTestData:false})\n\t\t  this.setState({pageloadingStatus:false});\n\t\t  this.setState({modal:true})\n\t\t  return this.setState({modalValidationText:APIResponseJson.servermessage})\n          \n          \n        }\n        SaveTestDataRequest();\n\t}\n\tSelectTestDataEnv(event)\n\t{\n\t  var TEnv= event.target.value;\n\t  var oldEnv = this.state.testdataEnv;\n\t  \n\t  this.setState({testdataEnv: TEnv})\n\t  this.setState({checkTestDataEnv:false})\n\t  if(TEnv.trim().toString() !== oldEnv.trim().toString())\n\t  {\n\t\tthis.setState({loaderTestData:true})\n\t\tconst GetModule = async () => \n\t\t{\n\t\t\tthis.setState({pageloadingStatus:true});\n\t\t\tconst ModuleResponce = await fetch(APIBasePath+'testcase/0')\n\t\t\tconst ModuleList = await ModuleResponce.json();\n\t\t\tthis.setState({allModuleName:ModuleList})\n\t\t\tthis.setState({loaderTestData:false})\n\t\t\tthis.setState({pageloadingStatus:false});\n\t\t}\n\t\tGetModule();\n\t  }\n\t  \n\t}\n\n\tSelectTestDataModule(event)\n\t{\n\t\tvar TestDModule = event.target.value;\n\t\tvar OldModule = this.state.testDataModule;\n\t\t\n\t\tthis.setState({testDataModule : TestDModule})\n\t\tthis.setState({checkTestDataModule:false})\n\t\tvar keyName= '';\n\t\tvar keyValNew='';\n\t\t//@ Logic For Test Data\n\t\tvar TestEn= this.state.testdataEnv;\n\t\tif(TestDModule.trim().toString() !== OldModule.trim().toString())\n\t\t{\n\t\t\ttry \n\t\t\t{\n\t\t\t  this.setState({loaderTestData:true})\n\t\t\t  this.setState({pageloadingStatus:true})\n\t\t\t  this.setState({PreviousTestDataState:[]})\n\t\t\t  var TotalHeader=[];\n\t\t\t  var testDataFile = {};\n\t\t\t  const Request1 = async () => \n\t\t\t  {\n\t\t\t\tconst Req1 = await fetch(APIBasePath+'testdata/'+TestEn+'/'+TestDModule)\n\t\t\t\tconst Response1 = await Req1.json();\n\t\t\t\ttestDataFile=Response1;\n\t\t\t\tlet allTestID = Object.keys(testDataFile);\n\t\t\t\tfor(let i=0;i<allTestID.length;i++)\n\t\t\t\t{\n\t\t\t\t  var allTestIDcontent = testDataFile[allTestID[i]][0][1];\n\t\t\t\t  let TestDataFromID= Object.keys(allTestIDcontent);\n\t\t\t\t  for(let j=0;j<TestDataFromID.length;j++)\n\t\t\t\t  {\n\t\t\t\t\t keyName =TestDataFromID[j];\n\t\t\t\t\tif(!TotalHeader.includes(keyName))\n\t\t\t\t\t{\n\t\t\t\t\t  TotalHeader.push(keyName);\n\t\t\t\t\t}\n\t\t\t\t  }\n\t\t\t\t}\n\t\t\t\t//@ Set Header Column\n\t\t\t\tthis.setState({testDatacolumns:[]});\n\t\t\t\tvar testDataHeaderCol= [{dataField: 'id',text: '#'},{dataField: 'testdatacolid1',text: 'TESTID'}];\n\t\t\t\tthis.setState({ testDatacolumns:testDataHeaderCol});\n\t\t\t\tthis.setState({ testDataItemrowList:[]});\n\t\t\t\t\n\t\t\t\tfor(let i=0;i<TotalHeader.length;i++)\n\t\t\t\t{\n\t\t\t\t  var Item={}\n\t\t\t\t  var coldatafiledName='testdatacolid'+(i+2)\n\t\t\t\t  Item={dataField:coldatafiledName,text:TotalHeader[i]}\n\t\t\t\t  testDataHeaderCol.push(Item)\n\t\t\t\t}\n\t\t\t\tthis.setState({ testDatacolumns:testDataHeaderCol});\n  \n\t\t\t\t//@ Set Row Details\n\t\t\t\tvar allRowItem=[];\n\t\t\t\t\n\t\t\t\tvar counter=0;\n\t\t\t\tfor(let i=0;i<allTestID.length;i++)\n\t\t\t\t{\n\t\t\t\t\tvar TestID=allTestID[i];\n\t\t\t\t   var CheckData = testDataFile[TestID][0];\n\t\t\t\t   var TestDataIteration1 = Object.keys(CheckData);\n\t\t\t\t\tfor(let j=0;j<TestDataIteration1.length;j++)\n\t\t\t\t\t{\n\t\t\t\t\t  counter=counter+1;\n\t\t\t\t\t  var RowList={}\n\t\t\t\t\t  RowList['id']=counter;\n\t\t\t\t\t  RowList['testdatacolid1']=TestID;\n\t\t\t\t\t  for(let k=0;k<TotalHeader.length;k++)\n\t\t\t\t\t  {\n\t\t\t\t\t\t   keyName= TotalHeader[k];\n\t\t\t\t\t\t   keyValNew=''\n\t\t\t\t\t\t  try\n\t\t\t\t\t\t  {\n\t\t\t\t\t\t\tkeyValNew= CheckData[j+1][keyName];\n\t\t\t\t\t\t   if(keyValNew===undefined)\n\t\t\t\t\t\t   {\n\t\t\t\t\t\t\t  keyValNew='';\n\t\t\t\t\t\t   }\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  catch(err)\n\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t  keyValNew='';\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  var colNumber = (k+2);\n\t\t\t\t\t\t  RowList['testdatacolid'+colNumber] = keyValNew\n\t\t\t\t\t  }\n\t\t\t\t\t  allRowItem.push(RowList);\n\t\t\t\t  }\n\t\t\t\t  \n\t\t\t\t}\n\t\t\t   this.setState({ testDataItemrowList: allRowItem});\n\t\t\t   this.setState({PreviousTestDataState:allRowItem})\n\t\t\t   this.setState({loaderTestData:false})\n\t\t\t   this.setState({pageloadingStatus:false})\n\t\t\t  }\n\t\t\t  Request1();\n\n\n\t\t\t}\n\t\t\tcatch (err) \n\t\t\t{\n\t\t\t\tthis.setState({testDatacolumns:[]});\n\t\t\t\tthis.setState({ testDataItemrowList:[]});\n\t\t\t\tthis.setState({loaderTestData:false})\n\t\t\t\tthis.setState({pageloadingStatus:false})\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\t\n\t\n\t}\n\tSelectenvCopy(event)\n\t{\n\t  var envcopyvalue = event.target.value;\n\t  \n\t  this.setState({envCopy: event.target.value})\n\t  this.setState({checkenvCopy:false})\n\t  \n\t  var allItem = this.state.CommonTestData\n\t  for(let i=0;i<allItem.length;i++)\n\t  {\n\t\t  if(allItem[i].Environment.toString().trim().toLowerCase()===envcopyvalue.trim().toString().toLowerCase())\n\t\t  {\n\t\t\tthis.setState({checkenvCopy:true})\n\t\t\treturn this.setState({modalValidationText:'Env is already present'})\n\t\t  }\n\t  }\n  \n\t}\n\n\tSelectenvRename(event)\n\t{\n\t  var envcopyvalue=event.target.value;\n\t  \n\t  this.setState({envRename: event.target.value})\n\t  this.setState({checkenvRename:false})\n\t  \n\t  var allItem = this.state.CommonTestData\n\t  for(let i=0;i<allItem.length;i++)\n\t  {\n\t\t  if(allItem[i].Environment.toString().trim().toLowerCase()===envcopyvalue.trim().toString().toLowerCase())\n\t\t  {\n\t\t\tthis.setState({checkenvRename:true})\n\t\t\treturn this.setState({modalValidationText:'Env is already present'})\n\t\t  }\n\t  }\n  \n\t}\n\n\tDeleteEnv()\n\t{\n\t  //var ExceptionMessage='';\n\t  var env= this.state.envEnv\n\t  if(env.trim()===\"\")\n\t  {\n\t\t//ExceptionMessage= ExceptionMessage+ 'Environment* can not be left blank.'\n\t\treturn this.setState({checkenvEnv:true})\n\t  }\n      this.setState({loader:true})\n\t  this.setState({pageloadingStatus:true})\n\t  var ORAPI =APIBasePath+'or/'+env;\n\t  const DeleteEnvReq = async () => \n\t  {\n\t\tconst ORResponse = await fetch(ORAPI);\n\t\tconst ORJson = await ORResponse.json();\n\t\tthis.setState({loader:false})\n\t\tthis.setState({pageloadingStatus:false})\n\t\tif(ORJson.success.toLowerCase()==='true')\n\t\t{\n\t\t  this.state.envEnv='';\n\t\t  this.setState({modal:true})\n\t\t  return this.setState({modalValidationText:ORJson.servermessage})\n\t\t}\n\t\telse\n\t\t{\n\t\t  this.setState({modal:true})\n\t\t  return this.setState({modalValidationText:ORJson.servermessage})\n\t\t}\n\t\t\n\t\t\n\t  }\n\t  DeleteEnvReq();\n  \n\t}\n\n\tCreateNewEnvCopy()\n\t{\n\t  var ExceptionMessage ='';\n\t  var envName= this.state.envEnv\n\t  var envCopy= this.state.envCopy\n\t  if(envName.trim()===\"\")\n\t  {\n\t\tthis.setState({checkenvEnv:true})\n\t\tExceptionMessage= ExceptionMessage+ 'Environment* can not be left blank.'\n\t  }\n\t  if(envCopy.trim()===\"\")\n\t  {\n\t\tthis.setState({checkenvCopy:true})\n\t\tExceptionMessage= ExceptionMessage+ 'New Env. Copy* can not be left blank.'\n\t  }\n\t  if(ExceptionMessage.trim() !==\"\")\n\t  {\n\t   // this.setState({modal:true})\n\t\treturn this.setState({modalValidationText:ExceptionMessage})\n\t  }\n\t  if(envName.trim().toLowerCase()===envCopy.trim().toLowerCase())\n\t  {\n\t\t//this.setState({modal:true})\n\t\tthis.setState({checkenvCopy:true})\n\t\treturn this.setState({modalValidationText:'No Changes to Save'})\n\t  }\n\t  this.setState({loader:true})\n\t  var allItem = this.state.CommonTestData\n\t  for(let i=0;i<allItem.length;i++)\n\t  {\n\t\t  if(allItem[i].Environment.toString().trim().toLowerCase()===envCopy.trim().toString().toLowerCase())\n\t\t  {\n\t\t\tthis.setState({checkenvCopy:true})\n\t\t\treturn this.setState({modalValidationText:'No Changes to Save'})\n\t\t  }\n\t  }\n\t  var ORAPI =APIBasePath+'or/'+envName+'/'+envCopy+'/0';\n\t  const NewEnvCopy = async () => \n\t  {\n\t\tthis.setState({pageloadingStatus:true})\n\t\tconst ORResponse = await fetch(ORAPI);\n\t\tconst ORJson = await ORResponse.json();\n\t\tthis.setState({pageloadingStatus:false})\n\t\tif(ORJson.success.toLowerCase()==='true')\n\t\t{\n\t\t  this.setState({loader:false})\n\t\t  this.state.envEnv='';\n\t\t  this.setState({modal:true})\n\t\t  return this.setState({modalValidationText:ORJson.servermessage})\n\t\t}\n\t\telse\n\t\t{\n\t\t  this.setState({loader:false})\n\t\t  this.setState({modal:true})\n\t\t  return this.setState({modalValidationText:ORJson.servermessage})\n\t\t}\n\t\t\n\t\t\n\t  }\n\t  NewEnvCopy();\n\t} \n\n\t  SaveCommonTestData()\n\t {\n\t\tvar ExceptionMessage ='';\n\t\tvar envName= this.state.modEnv\n\t\tif(envName.trim()===\"\")\n\t\t{\n\t\t  this.setState({checkmodEnv:true})\n\t\t  ExceptionMessage= ExceptionMessage+ 'Environment* can not be left blank.'\n\t\t}\n\t\tif(ExceptionMessage.trim() !==\"\")\n\t\t{\n\t\t // this.setState({modal:true})\n\t\t  return this.setState({modalValidationText:ExceptionMessage})\n\t\t}\n\t\tif(!this.state.CommonTestDataChange)\n\t\t{\n\t\t\tthis.setState({modal:true})\n\t\t\treturn this.setState({modalValidationText:'No Changes to Save'})\n\t\t}\n\n\t\t//@ Get all value from Common test data\n\t\tthis.setState({loader:true})\n\t\tvar commonTestDataItem = this.state.CommonDataItem;\n\t\tvar CommonJObject ={};\n\t\tfor(let i=0;i<commonTestDataItem.length;i++)\n\t\t{\n\t\t\tCommonJObject[commonTestDataItem[i].commonKeyName.toString()]=commonTestDataItem[i].commonKeyValue.toString();\n\t\t}\n\t\t\n\t\tvar ORjson = genericHelper.common_ChangeJsoncontentforServer(CommonJObject)\n\t\tvar ORAPI =APIBasePath+'testdata/'+envName;\n\t\tvar requestOptions = {\n\t\t  method: 'POST',\n\t\t  headers: {\"Accept\": \"*/*\",'Content-type': 'application/json'},\n       \t  body: JSON.stringify(ORjson)\n\t\t};\n\t\tconst commonDataRequest = async () => \n\t\t{\n\t\t\tthis.setState({pageloadingStatus:true})\n\t\t  const ORResponse = await fetch(ORAPI,requestOptions);\n\t\t  const ORJson = await ORResponse.json();\n\t\t  this.setState({modal:true})\n\t\t  this.setState({loader:false})\n\t\t  this.setState({pageloadingStatus:false})\n\t\t  return this.setState({modalValidationText:ORJson.servermessage})\n\t\t}\n\t\tcommonDataRequest();\n\n\t }\n\n\t SelectmodEnv(event){\n\t\tthis.setState({CommonDataItem : []})\n\t\tthis.setState({modEnv : ''})\n\t\tthis.setState({CommonDataTotalSize : 0})\n\t\tthis.setState({checkmodEnv:false})\n\t\tvar onchangeenvvalue = event.target.value;\n\t\tthis.setState({modEnv : event.target.value})\n\t\tthis.setState({loader:true})\n\t\tvar URL =  APIBasePath+'testscript/'+onchangeenvvalue;\n\t\tconst Request1 = async () => \n\t\t{\n\t\t\tthis.setState({pageloadingStatus:true})\n\t\t  const Req1 = await fetch(URL)\n\t\t  const Response1 = await Req1.json();\n\t\t  this.setState({CommonDataItem:executionHelper.GetListOfListItemforCommonItem(Response1)})\n\t\t  this.setState({CommonDataTotalSize:this.state.CommonDataItem.length})\n\t\t  this.setState({loader:false})\n\t\t  this.setState({pageloadingStatus:false})\n\t\t}\n\t\tRequest1();\n\n\t  }\n\n\tRenameEnv()\n\t{\n\t  var ExceptionMessage ='';\n\t  var envName= this.state.envEnv\n\t  var envCopy= this.state.envRename\n\t  if(envName.trim()===\"\")\n\t  {\n\t\tthis.setState({checkenvEnv:true})\n\t\tExceptionMessage= ExceptionMessage+ 'Environment* can not be left blank.'\n\t  }\n\t  if(envCopy.trim()===\"\")\n\t  {\n\t\tthis.setState({checkenvRename:true})\n\t\tExceptionMessage= ExceptionMessage+ 'Rename Env* can not be left blank.'\n\t  }\n\t  if(ExceptionMessage.trim() !==\"\")\n\t  {\n\t   // this.setState({modal:true})\n\t\treturn this.setState({modalValidationText:ExceptionMessage})\n\t  }\n\t  if(envName.trim().toLowerCase()===envCopy.trim().toLowerCase())\n\t  {\n\t\t//this.setState({modal:true})\n\t\tthis.setState({checkenvRename:true})\n\t\treturn this.setState({modalValidationText:'No Changes to Save'})\n\t  }\n\t  var allItem = this.state.CommonTestData\n\t  for(let i=0;i<allItem.length;i++)\n\t  {\n\t\t  if(allItem[i].Environment.toString().trim().toLowerCase()===envCopy.trim().toString().toLowerCase())\n\t\t  {\n\t\t\tthis.setState({checkenvRename:true})\n\t\t\treturn this.setState({modalValidationText:'Env is already present'})\n\t\t  }\n\t  }\n      this.setState({loader:true})\n\t  var ORAPI =APIBasePath+'or/'+envName+'/'+envCopy+'/0/0';\n\t  const RenameEnv = async () => \n\t  {\n\t\tthis.setState({pageloadingStatus:true})\n\t\tconst ORResponse = await fetch(ORAPI);\n\t\tconst ORJson = await ORResponse.json();\n\t\tthis.setState({pageloadingStatus:false})\n\t\tthis.setState({loader:false})\n\t\tif(ORJson.success.toLowerCase()==='true')\n\t\t{\n\t\t  this.state.envEnv='';\n\t\t  this.setState({modal:true})\n\t\t  return this.setState({modalValidationText:ORJson.servermessage})\n\t\t}\n\t\telse\n\t\t{\n\t\t  this.setState({modal:true})\n\t\t  return this.setState({modalValidationText:ORJson.servermessage})\n\t\t}\n\t\t\n\t\t\n\t  }\n\t  RenameEnv();\n\n  \n\t}\n\taddNewCommonData = () => \n\t{\n\t\tvar env = this.state.modEnv;\n\t\tif(env.trim()===\"\")\n\t\t{\n\t\t\tthis.setState({checkmodEnv:true})\n\t\t\treturn;\n\t\t}\n\t\tvar ItemCount =this.state.CommonDataItem.length\n\t\t//console.log(ItemCount);\n\t\tif(ItemCount>0)\n\t\t{\n\t\t\tvar valuecheck = this.state.CommonDataItem[ItemCount-1].commonKeyName\n\t\t\t//console.log(valuecheck);\n\t\t\tif(valuecheck.trim()===\"\")\n\t\t\t{\n\t\t\t\tthis.setState({modal:true})\n\t\t\t    return this.setState({modalValidationText:'Before adding new Common key, add previous Common key.'})\n\t\t\t}\n\t\t}\n\t\tthis.setState({loader:true})\n\t\tvar lastOneId = this.state.CommonDataItem.length + 1;\n\t\tthis.setState({ CommonDataItem: [...this.state.CommonDataItem, {\n\t\t\tid: `${lastOneId}`, commonKeyName: ``,commonKeyValue:``\n\t\t}] });\n\t\tthis.setState({loader:false})\n\t}\n\tdeleteCommonData = () => {\n\n\t\tvar allItem = this.state.CommonDataItem.length;\n\t\tif(allItem===0)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\tvar selectedrowid = this.state.selectedCommonID;\n\t\tif(selectedrowid===0)\n\t\t{\n\t\t\tthis.setState({modal:true})\n\t\t\treturn this.setState({modalValidationText:'Please select record before delete action.'})\n\t\t}\n\t\tthis.setState({loader:true})\n\t\tvar commontestDataItems = this.state.CommonDataItem.filter(m => m.id !== selectedrowid);\n\t\tfor(let i=selectedrowid-1;i<allItem-1;i++)\n\t\t{\n\t\t\tcommontestDataItems[i].id=i+1;\n\t\t}\n\t\tthis.setState({ CommonDataItem: commontestDataItems });\n\t\tthis.setState({ selectedCommonID:selectedrowid });\n\t\tthis.setState({loader:false})\n\t\t\n\n\t  };\n\t  handleOnSelect = (row, isSelect) => {\n\t\tif (isSelect) \n\t\t{\n\t\t\tvar selectedrow= row.id;\n\t\t\tthis.setState({ selectedCommonID:selectedrow });\n\n\t\t}\n\t}\n\thandleOnSelectForTestData = (row, isSelect) => {\n\t\tif (isSelect) \n\t\t{\n\t\t\tvar selectedrow= row.id;\n\t\t\tthis.setState({ selectedTestData:selectedrow });\n\n\t\t}\n\t}\n\taddNewTestDataRow = () => \n\t{\n\t\tvar ItemList = this.state.testDataItemrowList;\n\t\tvar ColList = this.state.testDatacolumns;\n\t\tif(ColList.length===1)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\tif(ItemList.length>1)\n\t\t{\n\t\t\tfor(let i=0;i<ItemList.length;i++)\n\t\t\t{\n\t\t\t\tvar testIDName= ItemList[i]['testdatacolid1'];\n\t\t\t\tif(testIDName.trim() ===\"\")\n\t\t\t\t{\n\t\t\t\t\tthis.setState({modal:true})\n\t\t\t        return this.setState({modalValidationText:'Please add the test data information for record number '+(i+1)+', before adding new record.'});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.setState({loaderTestData:true})\n\t\tvar selectedID = this.state.selectedTestData;\n\t\tif(selectedID>ItemList.length)\n\t\t{\n\t\t\tselectedID=0;\n\t\t}\n\t\t//@ Add New Row using variable\n\t\tif(selectedID ===0)\n\t\t{\n\t\t\tselectedID= ItemList.length;\n\t\t}\n\t\tvar UpdatedRow=[]\n\t\tfor(let i=0;i<selectedID;i++)\n\t\t{\n\t\t\tUpdatedRow[i]= this.state.testDataItemrowList[i];\n\t\t}\n\t\t//@ add New Row\n\t\tvar NewItemContent ={};\n\t\ttry\n\t\t{\n\t\tselectedID= parseInt(selectedID.trim())\n\t\t}\n\t\tcatch(error)\n\t\t{}\n\t\tNewItemContent['id']=selectedID+1;\n\t\tNewItemContent['testdatacolid1']=''\n\t\tfor(let i=2;i<ColList.length;i++)\n\t\t{\n\t\t\tvar keyName = 'testdatacolid'+i\n\t\t\tNewItemContent[keyName]='';\n\t\t}\n\t\tUpdatedRow.push(NewItemContent)\n\t\tfor(let i=selectedID;i<ItemList.length;i++)\n\t\t{\n\t\t\tItemList[i]['id']=i+2;\n\t\t\tUpdatedRow.push(ItemList[i]);\n\t\t}\n\t\tthis.setState({ testDataItemrowList: UpdatedRow});\n\t\tthis.setState({loaderTestData:false})\n\n\t}\n\tdeleteTestDataRow = () =>\n\t {\n\t\tvar ItemList = this.state.testDataItemrowList;\n\t\tif(ItemList.length===0)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\tvar selectedID = this.state.selectedTestData;\n\t\tif(selectedID===0)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\tthis.setState({loaderTestData:true})\n\t\tvar testData = this.state.testDataItemrowList.filter(m => m.id !== selectedID);\n\t\tfor(let i=selectedID;i<=testData.length;i++)\n\t\t{\n\t\t\ttestData[i-1]['id']=i;\n\t\t}\n\t\tthis.setState({ testDataItemrowList: testData });\n\t\tthis.setState({selectedTestData:selectedID})\n\t\tthis.setState({loaderTestData:false})\n\t  };\n\n\ttoggle = modalType => () => {\n\t\tif (!modalType) {\n\t\t  return this.setState({\n\t\t\tmodal: !this.state.modal,\n\t\t  });\n\t\t}\n\t\n\t\tthis.setState({\n\t\t  [`modal_${modalType}`]: !this.state[`modal_${modalType}`],\n\t\t});\n\t  };\n\t\n\t  render() {\n\t\n\t\tvar {allModuleName} = this.state;\n\t  \n\t\tconst selectRow = {\n\t\t\tmode: 'radio',\n\t\t\tonSelect: this.handleOnSelect\n\t\t\t};\n\t\tconst selectRowforTestData = {\n\t\t\tmode: 'radio',\n\t\t\tonSelect: this.handleOnSelectForTestData\n\t\t\t};\n\t\tconst rowEvents = {\n\t\t\tonClick: (e, row, rowIndex) => {\n\t\t\t\t//console.log(`clicked on row with index: ${rowIndex}`);\n\t\t}};\n\t\tconst afterSaveCell=(oldValue, newValue) =>\n\t\t{\n\t\t\tthis.setState({CommonTestDataChange:true})\n\t\t};\n\t\tconst options = {\n\t\tsizePerPage: 20,\n\t\thideSizePerPage: true,\n\t\thidePageListOnlyOnePage: true\n\t\t};\n\t\tvar columns = [\n\t\t\t{\n\t\t\t  dataField: 'id',\n\t\t\t  text: '#',\n\t\t\t  headerStyle: { width: '40px' },\n\t\t\t  Cell: row => (\n\t\t\t\t<div>\n\t\t\t\t  <span title={ row.value }>{ row.value }</span>\n\t\t\t\t</div>\n\t\t\t  )\n\t\t\t},\n\t\t\t{\n\t\t\t  dataField: 'commonKeyName',\n\t\t\t  text: 'Key Name*',\n\t\t\t  filter: textFilter(),\n\t\t\t  validator: (newValue, row, column) => {\n\t\t\t\tif (newValue.trim()==='') {\n\t\t\t\t  return {\n\t\t\t\t\tvalid: false,\n\t\t\t\t\tmessage: 'Key Name* can not be blank.'\n\t\t\t\t  };\n\t\t\t\t}\n\t\t\t\tvar totalCount = this.state.CommonDataItem.length;\n\t\t\t\tfor(let i=0;i<totalCount;i++)\n\t\t\t\t{\n\t\t\t\t\tvar ItemName = this.state.CommonDataItem[i].commonKeyName;\n\t\t\t\t\tif(ItemName.trim().toLowerCase()===newValue.trim().toLowerCase())\n\t\t\t\t\t{\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tvalid: false,\n\t\t\t\t\t\t\tmessage: 'Key Name* can not be duplicate.'\n\t\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t  }\n\t\t\t},\n\t\t\t{\n\t\t\t\tdataField: 'commonKeyValue',\n\t\t\t\ttext: 'Key Value',\n\t\t\t\tfilter: textFilter()\n\t\t\t  }\n\t\t  ];\n  return (\n    <Page title=\"Test Data\" breadcrumbs={[{ name: 'Test Data', active: true }]}>\n\t\t<Loader \n         type=\"ThreeDots\"\n         color=\"#00BFFF\"\n         height={50}\n         width={100}\n         timeout={120000} //3 secs\n         visible = {this.state.loader}\n        />\n\t\t  <Row>\n\t\t  <Col lg={6} md={6} sm={6} xs={12}>\n          <Card>\n            <CardHeader>Update Environment</CardHeader>\n            <CardBody>\n              <Form inline>\n                <FormGroup row>\n                  <Label for=\"exampleSelect\" >\n                    Environment*\n                  </Label>\n                  <Col >\n                    <Input disabled={this.state.pageloadingStatus} invalid={this.state.checkenvEnv} type=\"select\" name=\"envEnv\" value={this.state.envEnv} onChange={this.SelectenvEnv.bind(this)}>\n\t\t\t\t\t<option selected=\"selected\">{this.state.envEnv}</option>\n\t\t\t\t\t<Options options={this.state.CommonTestData} />\n\t\t\t\t\t</Input>\n                  </Col>\n\t\t\t\t</FormGroup>\n\t\t\t\t<Col>\n\t\t\t\t  <Button disabled={this.state.pageloadingStatus} onClick={this.DeleteEnv.bind(this)} color=\"primary\" name=\"envDelete\" >Delete</Button>\n\t\t\t\t  <Modal\n\t\t\t\t\tisOpen={this.state.modal}\n\t\t\t\t\ttoggle={this.toggle()}\n\t\t\t\t\tclassName={this.props.className}>\n\t\t\t\t\t<ModalHeader  toggle={this.toggle()}> Information</ModalHeader>\n\t\t\t\t\t<ModalBody >\n\t\t\t\t\t{this.state.modalValidationText}\n\t\t\t\t\t</ModalBody>\n\t\t\t\t\t<ModalFooter>\n\t\t\t\t\t<Button color=\"secondary\" onClick={this.toggle()}>\n\t\t\t\t\t\tOK\n\t\t\t\t\t</Button>\n\t\t\t\t\t</ModalFooter>\n              \t</Modal>\n\t\t\t\t</Col>\n\t\t\t  <FormGroup row>\n                  <Label for=\"exampleSelect\" >\n                    New Env. Copy*\n                  </Label>\n                    <Col >\n                    <Input disabled={this.state.pageloadingStatus} invalid={this.state.checkenvCopy} value={this.state.envCopy} type=\"input\" name=\"newEnvCopy\" placeholder=\"New env name.\"  onChange={this.SelectenvCopy.bind(this)}/>\n                  </Col>\n              </FormGroup>\n\t\t\t  <Col>\n\t\t\t\t  <Button disabled={this.state.pageloadingStatus} onClick={this.CreateNewEnvCopy.bind(this)} color=\"primary\" name =\"newEnvCopy\">Save</Button>\n\t\t\t  </Col>\n\t\t\t  <FormGroup row>\n                  <Label for=\"exampleSelect\" >\n                    Rename Env.*\n                  </Label>\n                    <Col >\n                    <Input disabled={this.state.pageloadingStatus} invalid={this.state.checkenvRename} value={this.state.envRename} type=\"input\" name=\"newEnvName\" placeholder=\"New env name.\" onChange={this.SelectenvRename.bind(this)}/>\n                  </Col>\n              </FormGroup>\n\t\t\t  <Col>\n\t\t\t\t  <Button disabled={this.state.pageloadingStatus} onClick={this.RenameEnv.bind(this)} color=\"primary\" name =\"newEnvName\">Save</Button>\n\t\t\t  </Col>\n              </Form>\n            </CardBody>\n          </Card>\n        </Col>\n\t\t<Col lg={6} md={6} sm={6} xs={12}>\n          <Card>\n            <CardHeader>Common Test Data \n\t\t\t\t<row>\n\t\t\t\t\t<Button disabled={this.state.pageloadingStatus} onClick={this.SaveCommonTestData.bind(this)} color=\"primary\" name =\"saveCommonTestData\">Save</Button>\n\t\t\t\t</row>\n\t\t\t</CardHeader>\n\t\t\t<CardHeader>Environment*\n\t\t\t\t<FormGroup row>\n                \t<Col >\n                    \t<Input disabled={this.state.pageloadingStatus} invalid={this.state.checkmodEnv} type=\"select\" name=\"modEnv\" value={this.state.modEnv} onChange={this.SelectmodEnv.bind(this)}>\n\t\t\t\t\t\t<option selected=\"selected\">{this.state.modEnv}</option>\n\t\t\t\t\t\t<Options options={this.state.CommonTestData} />\n\t\t\t\t\t\t</Input>\n                  \t</Col>\n\t\t\t\t  \t<CardImg\n\t\t\t\t\t className=\"card-img-right\"\n\t\t\t\t\t disabled={this.state.pageloadingStatus}\n\t\t\t\t\t  src={bg1Image}\n\t\t\t\t\t  style={{ width: 'auto', height: 30 }}\n\t\t\t\t\t  onClick={ () => this.addNewCommonData() }\n\t\t\t\t\t/>\n\t\t\t\t\t<CardImg\n\t\t\t\t\t  className=\"card-img-right\"\n\t\t\t\t\t  disabled={this.state.pageloadingStatus}\n\t\t\t\t\t  src={bg3Image}\n\t\t\t\t\t  style={{ width: 'auto', height: 30 }}\n\t\t\t\t\t  onClick={ () => this.deleteCommonData() } \n\t\t\t\t\t/>\n             \t</FormGroup>\n\t\t\t</CardHeader>\n            <CardBody>\n\t\t\t<BootstrapTable\n\t\t\t\tkeyField=\"id\"\n\t\t\t\tdisabled={this.state.pageloadingStatus}\n\t\t\t\tdata={ this.state.CommonDataItem }\n\t\t\t\tcolumns={ columns }\n\t\t\t\tstriped\n\t\t\t\thover\n\t\t\t\tcondensed\n\t\t\t\tpagination={ paginationFactory(options) }\n\t\t\t\trowEvents={ rowEvents }\n\t\t\t\tonDataSizeChange={ this.handleDataChange }\n\t\t\t\tfilter={ filterFactory() }\n\t\t\t\tselectRow={ selectRow }\n\t\t\t\tcellEdit={ cellEditFactory({\n\t\t\t\t\tmode: 'click',\n\t\t\t\t\tblurToSave: true,\n\t\t\t\t\tafterSaveCell\n\t\t\t\t\t})}\n\t\t\t/>\n            </CardBody>\n          </Card>\n        </Col>\n\t</Row>\n\t  <Row>\n\t  \t<Col lg={12} md={6} sm={6} xs={12}>\n          <Card>\n            <CardHeader>Update Test Script Data\n\t\t\t\t<CardImg\n\t\t\t\t\tclassName=\"card-img-right\"\n\t\t\t\t\tsrc={bg1Image}\n\t\t\t\t\tstyle={{ width: 'auto', height: 30 }}\n\t\t\t\t\tonClick={ () => this.addNewTestDataRow() }\n\t\t\t\t\tdisabled={this.state.pageloadingStatus}\n\t\t\t\t\t/>\n\t\t\t\t\t<CardImg\n\t\t\t\t\t\tclassName=\"card-img-right\"\n\t\t\t\t\t\tsrc={bg3Image}\n\t\t\t\t\t\tstyle={{ width: 'auto', height: 30 }}\n\t\t\t\t\t\tonClick={ () => this.deleteTestDataRow() }\n\t\t\t\t\t\tdisabled={this.state.pageloadingStatus}\n\t\t\t\t\t/>\n\t\t\t\t<Button disabled={this.state.pageloadingStatus} onClick={this.SaveModuleTestData.bind(this)} color=\"primary\" name =\"saveTestData\">Save</Button>\n\t\t\t\t<Loader \n\t\t\t\ttype=\"ThreeDots\"\n\t\t\t\tcolor=\"#00BFFF\"\n\t\t\t\theight={50}\n\t\t\t\twidth={100}\n\t\t\t\ttimeout={120000} //3 secs\n\t\t\t\tvisible = {this.state.loaderTestData}\n\t\t\t\t/>\n\t\t\t</CardHeader>\n            <CardBody>\n\t\t\t<Form >\n                <FormGroup row>\n                  <Label for=\"exampleSelect\" >\n                    Environment*\n                  </Label>\n                  <Col >\n                    <Input disabled={this.state.pageloadingStatus} invalid={this.state.checkTestDataEnv} type=\"select\" name=\"testdataEnv\" value={this.state.testdataEnv} onChange={this.SelectTestDataEnv.bind(this)}>\n\t\t\t\t\t<option selected=\"selected\">{this.state.testdataEnv}</option>\n\t\t\t\t\t<Options options={this.state.CommonTestData} />\n\t\t\t\t\t</Input>\n                  </Col>\n\t\t\t\t  <Label for=\"exampleSelect\" >\n                    Module*\n                  </Label>\n\t\t\t\t  <Col >\n                    <Input disabled={this.state.pageloadingStatus} invalid={this.state.checkTestDataModule} type=\"select\" name=\"testDataModule\" value={this.state.testDataModule} onChange={this.SelectTestDataModule.bind(this)}>\n\t\t\t\t\t<option selected=\"selected\">{this.state.testDataModule}</option>\n\t\t\t\t\t<GetAllModule options={allModuleName} />\n\t\t\t\t\t</Input>\n                  </Col>\n\t\t\t\t</FormGroup>\n\t\t\t\t<CardBody>\n\t\t\t\t<BootstrapTable\n\t\t\t\t\tkeyField=\"id\"\n\t\t\t\t\tdisabled={this.state.pageloadingStatus}\n\t\t\t\t\tdata={ this.state.testDataItemrowList }\n\t\t\t\t\tcolumns={ this.state.testDatacolumns}\n\t\t\t\t\tstriped\n\t\t\t\t\thover\n\t\t\t\t\tcondensed\n\t\t\t\t\tpagination={ paginationFactory(options) }\n\t\t\t\t\tselectRow={ selectRowforTestData }\n\t\t\t\t\tcellEdit={ cellEditFactory({\n\t\t\t\t\t\tmode: 'click',\n\t\t\t\t\t\tblurToSave: true,\n\t\t\t\t\t\t})}\n\t\t\t\t/>\n                </CardBody>\n            </Form>\n            </CardBody>\n          </Card>\n        </Col>\t\t\t\n        </Row>\n\t\t</Page>\n  );\n  }\n};\n\nexport default TestData;\n"],"sourceRoot":""}