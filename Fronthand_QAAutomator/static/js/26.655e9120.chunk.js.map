{"version":3,"sources":["components/Typography.js","components/Page.js","../node_modules/reactstrap/es/CardImg.js","assets/img/bg/CICDTool.JPG","pages/API/APICICD.js"],"names":["tagMap","h1","h2","h3","h4","h5","h6","p","lead","blockquote","Typography","TypoComp","Tag","tag","className","type","restProps","classes","classNames","defaultProps","bem","bn","create","Page","title","breadcrumbs","children","b","e","length","map","name","active","index","key","propTypes","tagPropType","top","PropTypes","bool","bottom","string","cssModule","object","CardImg","props","attributes","_objectWithoutPropertiesLoose","cardImgClassName","mapToCssModules","React","createElement","_extends","module","exports","APIBasePath","window","ENV","APIURL","GetListvalueFromJsonResponce","options","allitem","Object","keys","push","GetAllCDCDSuite","GetAllEnvName","SetJsonContent","ItemValue","valueaf","includes","split","join","error","CICDSupport","Component","constructor","super","toggle","modalType","this","setState","modal","state","handleOnSelect","row","isSelect","selected","id","filter","x","handleOnSelectAll","rows","ids","r","Browser","RegressionENV","RegressionBrowser","CommonTestData","ConfigurationFile","loader","loaderLoadTestScripts","testSuiteData","allModuleName","allModule","testSuiteResponce","NewTestSuite","allCICDSuite","apiTestSuiteName","cicdAPI","LoadScriptButtonenabled","modalValidationText","PreSelectedTestScripts","EmailTrigger","FromEmail","FromPassword","ReceiverEmail","checkFromEmai","checkPassword","checkRecemail","pageloadingStatus","EnvName","feedbackFromEmail","feedbackFromPassword","feedbackRecieverEmail","a","fetch","configPage","json","configPageResponse","Request4","Response4","apiURL","Req4","GetLoaderData","updateENV","event","target","value","updateBrowser","updateRegressionENV","env","trim","CICDSuite","updateRegressionBrowser","browser","updateAPITestSuite","LoadallTestscripts","GetApiScripts","SaveTestSuite","selectedTestScripts","testSuiteName","emailTriggerOption","FEmailAddress","FEmailPassword","REmailAddress","Message","TestSuiteDataforPost","EmailItem","i","Testinformation","moduleName","testid","testcasename","TestSuiteJson","JSON","stringify","TestSuiteAPI","requestOptions","method","headers","body","APIReq","APIRes","success","servermessage","TestSuiteSaveRequest","updateRegressionSuite","runTimeModule","prevValue","existingSuite","checkvalue","toLowerCase","CheckValueFromJson","EmailShooting","FEmail","FPWD","REmail","Reqest1","Response1","testCaseList","console","log","stepid","allList","checkboxList","Mod","Module","TestID","testName","TestCaseName","Req1","updateEmailOption","emailoption","UpdateFromEmail","email","validator","isEmail","UpdatePassword","pwd","UpdateRecieverEmail","render","selectRow","mode","onSelect","onSelectAll","testSuitecolumns","dataField","text","headerStyle","width","textFilter","color","height","timeout","visible","lg","md","sm","xs","src","CICDImage","style","col","for","disabled","onChange","bind","readOnly","data","caseSensitive","minLength","invalid","placeholder","onClick","isOpen","keyField","columns","striped","hover","condensed","pagination","paginationFactory","sizePerPage","hideSizePerPage","hidePageListOnlyOnePage","filterFactory"],"mappings":"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","file":"static/js/26.655e9120.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport PropTypes from 'utils/propTypes';\n\nconst tagMap = {\n  h1: 'h1',\n  h2: 'h2',\n  h3: 'h3',\n  h4: 'h4',\n  h5: 'h5',\n  h6: 'h6',\n  'display-1': 'h1',\n  'display-2': 'h1',\n  'display-3': 'h1',\n  'display-4': 'h1',\n  p: 'p',\n  lead: 'p',\n  blockquote: 'blockquote',\n};\n\nconst types = Object.keys(tagMap);\n\nconst Typography = ({ tag: Tag, className, type, ...restProps }) => {\n  const classes = classNames({ [type]: !!type }, className);\n  let TypoComp;\n\n  if (Tag) {\n    TypoComp = Tag;\n  } else if (!Tag && tagMap[type]) {\n    TypoComp = tagMap[type];\n  } else {\n    TypoComp = 'p';\n  }\n\n  return <TypoComp {...restProps} className={classes} />;\n};\n\nTypography.propTypes = {\n  tag: PropTypes.component,\n  className: PropTypes.string,\n  type: PropTypes.oneOf(types),\n};\n\nTypography.defaultProps = {\n  type: 'p',\n};\n\nexport default Typography;\n","import React from 'react';\nimport PropTypes from 'utils/propTypes';\n\nimport bn from 'utils/bemnames';\n\nimport { Breadcrumb, BreadcrumbItem } from 'reactstrap';\n\nimport Typography from './Typography';\n\nconst bem = bn.create('page');\n\nconst Page = ({\n  title,\n  breadcrumbs,\n  tag: Tag,\n  className,\n  children,\n  ...restProps\n}) => {\n  const classes = bem.b('px-3', className);\n\n  return (\n    <Tag className={classes} {...restProps}>\n      <div className={bem.e('header')}>\n        {title && typeof title === 'string' ? (\n          <Typography type=\"h1\" className={bem.e('title')}>\n            {title}\n          </Typography>\n        ) : (\n            title\n          )}\n        {breadcrumbs && (\n          <Breadcrumb className={bem.e('breadcrumb')}>\n            <BreadcrumbItem>Home</BreadcrumbItem>\n            {breadcrumbs.length &&\n              breadcrumbs.map(({ name, active }, index) => (\n                <BreadcrumbItem key={index} active={active}>\n                  {name}\n                </BreadcrumbItem>\n              ))}\n          </Breadcrumb>\n        )}\n      </div>\n      {children}\n    </Tag>\n  );\n};\n\nPage.propTypes = {\n  tag: PropTypes.component,\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  className: PropTypes.string,\n  children: PropTypes.node,\n  breadcrumbs: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      active: PropTypes.bool,\n    })\n  ),\n};\n\nPage.defaultProps = {\n  tag: 'div',\n  title: '',\n};\n\nexport default Page;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  top: PropTypes.bool,\n  bottom: PropTypes.bool,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'img'\n};\n\nvar CardImg = function CardImg(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      top = props.top,\n      bottom = props.bottom,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"top\", \"bottom\", \"tag\"]);\n\n  var cardImgClassName = 'card-img';\n\n  if (top) {\n    cardImgClassName = 'card-img-top';\n  }\n\n  if (bottom) {\n    cardImgClassName = 'card-img-bottom';\n  }\n\n  var classes = mapToCssModules(classNames(className, cardImgClassName), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nCardImg.propTypes = propTypes;\nCardImg.defaultProps = defaultProps;\nexport default CardImg;","module.exports = __webpack_public_path__ + \"static/media/CICDTool.8a16b75e.JPG\";","import Page from 'components/Page';\nimport React from 'react';\nimport CICDImage from 'assets/img/bg/CICDTool.JPG';\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  Col,\n  Form,\n  FormGroup,\n  Input,\n  Label,\n  Row,\n  FormFeedback,\n  Modal,\n  ModalBody,\n  ModalFooter,\n  ModalHeader,\n  CardImg,\n} from 'reactstrap';\nimport 'react-widgets/dist/css/react-widgets.css';\nimport { Combobox } from 'react-widgets'\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport filterFactory, { textFilter } from 'react-bootstrap-table2-filter';\nimport Loader from 'react-loader-spinner'\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\nimport validator from 'validator';\nvar APIBasePath= window.ENV.APIURL;\n\nfunction Options({ options }) {\n  return (\n      options.map(option => \n                  <option key={option.Environment}>                                   \n                  {option.Environment}\n                  </option>)\n                 );\n}\nfunction GetListvalueFromJsonResponce(options) \n{\n  let allitem = []\n     Object.keys(options).map((key) => (\n      allitem.push(options[key])\n\t));\n\treturn allitem;\n}\nfunction GetAllCDCDSuite({ options }) {\n\n  return (\n    Object.keys(options).map((key)  => \n    <option >{options[key]}</option>)\n  );\n}\nfunction GetAllEnvName({ options }) {\n\n  return (\n    Object.keys(options).map((key)  => \n    <option >{key}</option>)\n  );\n  \n}\nfunction CheckValueFromJson( options,checkvalue) \n{\n  let allitem = []\n     Object.keys(options).map((key) => (\n      allitem.push(options[key])\n    ));\n    for (let i = 0; i < allitem.length; i++) \n    {\n      if(allitem[i].trim().toLowerCase()===checkvalue.trim().toLowerCase())\n      {\n        return true;\n      }\n     \n    }\n    return false;\n  \n}\n\nfunction SetJsonContent(ItemValue)\n{\n  try{\n    var valueaf =[];\n    if(ItemValue.includes(\"+\"))\n    {\n       valueaf = ItemValue.split('+')\n      ItemValue= valueaf.join('auplussignau')\n    }\n    if(ItemValue.includes(\":\"))\n    {\n       valueaf = ItemValue.split(':')\n      ItemValue= valueaf.join('aucolumnsignau')\n    }\n    if(ItemValue.includes(\"{\"))\n    {\n       valueaf = ItemValue.split('{')\n      ItemValue= valueaf.join('aucurlyopenbracketau')\n    }\n    if(ItemValue.includes(\"}\"))\n    {\n       valueaf = ItemValue.split('}')\n      ItemValue= valueaf.join('aucurlyclosebracketau')\n    }\n    if(ItemValue.includes(\"[\"))\n    {\n       valueaf = ItemValue.split('[')\n      ItemValue= valueaf.join('aubigopenbracketau')\n    }\n    if(ItemValue.includes(\"]\"))\n    {\n       valueaf = ItemValue.split(']')\n      ItemValue= valueaf.join('aubigclosebracketau')\n    }\n    if(ItemValue.includes(\"\\\"\"))\n    {\n       valueaf = ItemValue.split('\\\"')\n      ItemValue= valueaf.join('audoublequotesau')\n    }\n    if(ItemValue.includes(\"=\"))\n    {\n       valueaf = ItemValue.split('=')\n      ItemValue= valueaf.join('auequalsignau')\n    }\n     }\n     catch(error)\n     {}\n    return ItemValue;\n}\n\nclass CICDSupport extends React.Component{\n\n  constructor(props){\n    super(props);\n    this.state=\n    {\n        Browser:'',\n        ENV:'',\n        RegressionENV:'',\n        RegressionBrowser:'',\n        CommonTestData:[],\n        ConfigurationFile:[],\n        loader:true,\n        loaderLoadTestScripts:false,\n        testSuiteData: [],\n        selected:[],\n        allModuleName:[],\n        allModule :[],\n        testSuiteResponce:[],\n        NewTestSuite:'',\n        allCICDSuite:'',\n        apiTestSuiteName:'',\n        cicdAPI:'',\n        LoadScriptButtonenabled:false,\n        modalValidationText:'',\n        PreSelectedTestScripts:[],\n        EmailTrigger:'NO',\n        FromEmail:'',\n        FromPassword:'',\n        ReceiverEmail:'',\n        checkFromEmai:false,\n        checkPassword:false,\n        checkRecemail:false,\n        pageloadingStatus :false,\n        EnvName:[],\n        feedbackFromEmail:'',\n        feedbackFromPassword:'',\n        feedbackRecieverEmail:'',\n    }\n    const GetLoaderData = async () => \n    {\n      this.setState({loader:true})\n      this.setState({pageloadingStatus:true})\n      const configPage = await fetch(APIBasePath+'apiconfig');\n      const configPageResponse = await configPage.json();\n      if(Object.keys(configPageResponse).length>0)\n      {\n          this.setState({ConfigurationFile:configPageResponse});\n          this.setState({RegressionENV : configPageResponse['EXECUTIONSETUP']['DefaultEnvironment']});\n          this.setState({EnvName:configPageResponse['ENVIRONMENTSETUP']})\n          const Req4 = async () => \n          {\n            const Request4 = await fetch(APIBasePath+'apicicd')\n            const Response4 = await Request4.json();\n            if(Object.keys(Response4).length>0)\n            {\n            this.setState({allCICDSuite:Response4});\n            this.setState({apiTestSuiteName:'RegressionSuite'})\n            var apiURL= APIBasePath+'apicicd?env='+this.state.RegressionENV+'&testsuitename=RegressionSuite';\n            this.setState({cicdAPI:apiURL})\n            }\n            this.setState({loader:false});\n            this.setState({pageloadingStatus:false});\n          }\n          Req4();\n      }\n    }\n    GetLoaderData()\n    \n  }\n\n  toggle = modalType => () => {\n    if (!modalType) {\n      return this.setState({\n        modal: !this.state.modal,\n      });\n    }\n\n    this.setState({\n      [`modal_${modalType}`]: !this.state[`modal_${modalType}`],\n    });\n  };\n  updateENV(event)\n  {\n\t\tthis.setState({ENV : event.target.value})\n  }\n  updateBrowser(event)\n  {\n    this.setState({Browser : event.target.value})\n  }\n  updateRegressionENV(event)\n  {\n    var env = event.target.value;\n    this.setState({RegressionENV : env})\n    if(env.trim()===\"\")\n    {\n      this.setState({cicdAPI:''})\n      return;\n    }\n    var browser = this.state.RegressionBrowser;\n    if(browser.trim()===\"\")\n    {\n      this.setState({cicdAPI:''})\n      return;\n    }\n    var CICDSuite= this.state.apiTestSuiteName;\n    if(CICDSuite.trim()===\"\")\n    {\n      this.setState({cicdAPI:''})\n      return;\n    }\n\n    var apiURL= APIBasePath+'cicd?env='+env+'&testsuitename='+CICDSuite;\n    this.setState({cicdAPI:apiURL})\n  }\n  updateRegressionBrowser(event)\n  {\n    var  browser = event.target.value;\n    this.setState({RegressionBrowser : browser})\n    if(browser.trim()===\"\")\n    {\n      this.setState({cicdAPI:''})\n      return;\n    }\n    var env = this.state.RegressionENV;\n    if(env.trim()===\"\")\n    {\n      this.setState({cicdAPI:''})\n      return;\n    }\n    var CICDSuite= this.state.apiTestSuiteName;\n    if(CICDSuite.trim()===\"\")\n    {\n      this.setState({cicdAPI:''})\n      return;\n    }\n    var apiURL= APIBasePath+'cicd?env='+env+'&testsuitename='+CICDSuite;\n    this.setState({cicdAPI:apiURL})\n  }\n  updateAPITestSuite(event)\n  {\n      var CICDSuite = event.target.value;\n      if(CICDSuite !==this.state.apiTestSuiteName)\n      {\n       this.setState({apiTestSuiteName : CICDSuite})\n       var env = this.state.RegressionENV;\n       var apiURL= APIBasePath+'apicicd?env='+env+'&testsuitename='+CICDSuite;\n       this.setState({cicdAPI:apiURL})\n   }\n\n  }\n  \n  LoadallTestscripts()\n  {\n    const GetApiScripts = async () => \n    {\n      this.setState({loaderLoadTestScripts:true});\n      this.setState({loader:true});\n      const configPage = await fetch(APIBasePath+'apiexecution?module=All');\n      const configPageResponse = await configPage.json();\n      this.setState({testSuiteData:configPageResponse});\n      this.setState({selected:[]});\n      this.setState({loaderLoadTestScripts:false});\n      this.setState({loader:false});\n    }\n    GetApiScripts()\n  }\n\n  SaveTestSuite()\n  {\n     var TotalTestScripts= this.state.testSuiteData;\n     if(TotalTestScripts.length==0)\n     {\n      this.setState({modal:true})\n\t\t\treturn this.setState({modalValidationText:'Please upload test scripts first.'})\n     }\n     var selectedTestScripts = this.state.selected;\n     if(selectedTestScripts.length==0)\n     {\n      this.setState({modal:true})\n\t\t\treturn this.setState({modalValidationText:'Please select test scripts before saving new test suite.'})\n     }\n\n     var testSuiteName = this.state.NewTestSuite;\n     if(testSuiteName.trim()===\"\")\n     {\n      this.setState({modal:true})\n\t\t\treturn this.setState({modalValidationText:'Execution Suite Name* can not be empty.'})\n     }\n     //@ Check Email Option\n     var emailTriggerOption = this.state.EmailTrigger;\n     var FEmailAddress='';\n     var FEmailPassword='';\n     var REmailAddress='';\n\n     if(emailTriggerOption===\"YES\")\n     {\n        var Message= '';\n        FEmailAddress=this.state.FromEmail;\n        FEmailPassword= this.state.FromPassword;\n        REmailAddress= this.state.ReceiverEmail;\n        if(FEmailAddress.trim()===\"\")\n        {\n          Message=\"From Email Address\";\n          this.setState({checkFromEmai:true})\n          this.setState({feedbackFromEmail:'Email Address can not be blank.'})\n        }\n        if(FEmailPassword.trim()===\"\")\n        {\n          Message=Message+\"Password\";\n          this.setState({checkPassword:true})\n          this.setState({feedbackFromPassword:'Password can not be blank.'})\n        }\n        if(REmailAddress.trim()===\"\")\n        {\n          Message= Message+\"Reciever Email Address\";\n          this.setState({checkRecemail:true})\n          this.setState({feedbackRecieverEmail:'Email Address can not be blank.'})\n        }\n        if(Message.trim()!=='')\n        {\n          return;\n        }\n        if(this.state.checkRecemail || this.state.checkFromEmai || this.state.checkPassword)\n        {\n          return;\n        }\n\n     }\n \n     /*\n     var prevselected = this.state.PreSelectedTestScripts;\n     if(prevselected===selectedTestScripts)\n     {\n      this.setState({modal:true})\n\t\t\treturn this.setState({modalValidationText:'No Changes To Save.'})\n     }\n     */\n     var TestSuiteDataforPost=[];\n     var EmailItem={};\n     EmailItem[\"EmailOption\"]=SetJsonContent(emailTriggerOption);\n     EmailItem[\"FormEmailAddress\"]=SetJsonContent(FEmailAddress);\n     EmailItem[\"FEmailPassword\"]=SetJsonContent(FEmailPassword);\n     EmailItem[\"ReceiverEmailAddress\"]=SetJsonContent(REmailAddress);\n     this.setState({loaderLoadTestScripts:true})\n     TestSuiteDataforPost.push(EmailItem);\n     for(let i=0;i<selectedTestScripts.length;i++)\n     {\n      var Testinformation={};\n      Testinformation[\"Module\"]=SetJsonContent(this.state.testSuiteData[selectedTestScripts[i]-1].moduleName);\n      Testinformation[\"TestID\"]=SetJsonContent(this.state.testSuiteData[selectedTestScripts[i]-1].testid);\n      Testinformation[\"TestCaseName\"]=SetJsonContent(this.state.testSuiteData[selectedTestScripts[i]-1].testcasename);\n      TestSuiteDataforPost.push(Testinformation);\n     }\n\n     var TestSuiteJson = JSON.stringify(JSON.stringify(TestSuiteDataforPost));\n     var TestSuiteAPI =APIBasePath+'apicicd?SuiteName='+testSuiteName;\n     var requestOptions = {\n       method: 'POST',\n      headers: {\"Accept\": \"application/json; odata=verbose\",'Content-type': 'application/x-www-form-urlencoded'},\n       body: TestSuiteJson\n     };\n     const TestSuiteSaveRequest = async () => \n     {\n      this.setState({pageloadingStatus:true});\n       const APIReq = await fetch(TestSuiteAPI,requestOptions);\n       const APIRes = await APIReq.json();\n       this.setState({loaderLoadTestScripts:false})\n       this.setState({pageloadingStatus:false});\n       if(APIRes.success)\n       {\n         this.setState({testSuiteData:[]});\n         this.setState({NewTestSuite:''});\n         this.setState({PreSelectedTestScripts:[]});\n         this.setState({EmailTrigger:'NO'});\n         this.setState({FromEmail:''});\n         this.setState({FromPassword:''});\n         this.setState({ReceiverEmail:''});\n       }\n       this.setState({modal:true})\n       this.setState({modalValidationText:APIRes.servermessage})\n     }\n     TestSuiteSaveRequest();\n\n  }\n\n  updateRegressionSuite(event)\n  {\n    var runTimeModule = event;\n    var prevValue = this.state.NewTestSuite;\n    if(runTimeModule===prevValue)\n    {\n      return;\n    }\n    this.setState({NewTestSuite : runTimeModule.trim()})\n    if(runTimeModule.trim()===\"\")\n    {\n      this.setState({LoadScriptButtonenabled:false})\n      return;\n    }\n    this.setState({testSuiteData:''})\n    var existingSuite= this.state.allCICDSuite;\n     var existingSuite= CheckValueFromJson(existingSuite,runTimeModule);\n     var EmailShooting=\"NO\";\n     var FEmail=\"\";\n     var FPWD=\"\";\n     var REmail=\"\";\n    if(existingSuite)\n    {\n      this.setState({LoadScriptButtonenabled:true})\n      this.setState({loaderLoadTestScripts:true})\n      const Req1 = async () => \n      {\n        this.setState({pageloadingStatus:true});\n        const Reqest1 = await fetch(APIBasePath+'apicicd?TestSuiteName='+runTimeModule)\n        const Response1 = await Reqest1.json();\n        this.setState({pageloadingStatus:false});\n        EmailShooting=Response1[\"EmailOption\"];\n        FEmail = Response1[\"FormEmailAddress\"];\n        FPWD = Response1[\"FEmailPassword\"];\n        REmail = Response1[\"ReceiverEmailAddress\"];\n        this.setState({EmailTrigger:EmailShooting});\n        this.setState({FromEmail:FEmail});\n        this.setState({FromPassword:FPWD});\n        this.setState({ReceiverEmail:REmail});\n        var testCaseList= Response1[\"TestSuite\"];\n        console.log(testCaseList);\n       // Response1=Response1[\"TestSuite\"];\n        var stepid =0;\n        var allList =[];\n        var checkboxList=[];\n        var jstestStepData={};\n        for(let i=0;i<testCaseList.length;i++)\n        {\n          checkboxList.push(i+1);\n          stepid =stepid+1;\n          var Mod=testCaseList[i].Module;\n          var testid=testCaseList[i].TestID;\n          var testName=testCaseList[i].TestCaseName;\n          allList.push({id:stepid,moduleName:Mod,testid:testid,testcasename:testName})\n        }\n        //console.log(checkboxList)\n        //this.state.selected\n        this.setState({selected:checkboxList})\n        this.setState({testSuiteData:allList})\n        this.setState({loaderLoadTestScripts:false})\n        this.setState({PreSelectedTestScripts:checkboxList})\n        \n      }\n      Req1();\n    }\n    else\n    {\n        this.setState({LoadScriptButtonenabled:true})\n        this.setState({PreSelectedTestScripts:[]});\n        this.setState({EmailTrigger:'NO'});\n        this.setState({FromEmail:''});\n        this.setState({FromPassword:''});\n        this.setState({ReceiverEmail:''})\n    }\n\n\n  }\n\n  handleOnSelect = (row, isSelect) => {\n    if (isSelect) {\n      this.setState(() => ({\n        selected: [...this.state.selected, row.id]\n      }));\n    } else {\n      this.setState(() => ({\n        selected: this.state.selected.filter(x => x !== row.id)\n      }));\n    }\n  }\n\n  handleOnSelectAll = (isSelect, rows) => {\n    const ids = rows.map(r => r.id);\n    if (isSelect) {\n      this.setState(() => ({\n        selected: ids\n      }));\n    } else {\n      this.setState(() => ({\n        selected: []\n      }));\n    }\n  }\n\n  updateEmailOption(event)\n  {\n    var emailoption = event.target.value;\n    if(emailoption !==this.state.EmailTrigger)\n    {\n      this.setState({checkFromEmai:false});\n      this.setState({checkPassword:false});\n      this.setState({checkRecemail:false});\n    this.setState({EmailTrigger : event.target.value})\n    if(emailoption===\"YES\")\n    {\n      \n      this.setState({FromEmail:this.state.ConfigurationFile['EMAILSETUP']['SenderEmail']});\n      this.setState({FromPassword:this.state.ConfigurationFile['EMAILSETUP']['SenderPassword']});\n      this.setState({ReceiverEmail:this.state.ConfigurationFile['EMAILSETUP']['ReceiverEmail']});\n\n    }\n    else\n    {\n      this.setState({FromEmail:''});\n      this.setState({FromPassword:''});\n      this.setState({ReceiverEmail:''});\n    }\n  }\n  }\n  UpdateFromEmail(event)\n  {\n    this.setState({checkFromEmai:false})\n    var email = event.target.value;\n    if(email.trim() !==this.state.FromEmail)\n    {\n      this.setState({FromEmail : email.trim()})\n      if (!validator.isEmail(email))\n      {\n        this.setState({checkFromEmai:true})\n        this.setState({feedbackFromEmail:\"Email address is not valid\"})\n      }\n      else{\n        this.setState({checkFromEmai:false})\n      }\n    }\n    \n  }\n  UpdatePassword(event)\n  {\n    this.setState({checkPassword:false})\n    var pwd = event.target.value;\n    if(pwd.trim() !==this.state.FromPassword)\n    {\n      this.setState({FromPassword : pwd.trim()})\n      if(pwd.trim()==='')\n      {\n        this.setState({checkPassword:true})\n        this.setState({feedbackFromPassword:'Password can not be blank.'})\n      }\n      else{\n        this.setState({checkPassword:false})\n      }\n    }\n    \n  }\n  UpdateRecieverEmail(event)\n  {\n    this.setState({checkRecemail:false})\n    var email = event.target.value;\n    if(email.trim() !== this.state.ReceiverEmail)\n    {\n      this.setState({ReceiverEmail : email.trim()})\n      if (!validator.isEmail(email))\n      {\n        this.setState({checkRecemail:true})\n        this.setState({feedbackRecieverEmail:\"Email address is not valid\"})\n      }\n      else{\n        this.setState({checkRecemail:false})\n      }\n    }\n    \n  }\n\n  render() {\n    const selectRow = {\n      mode: 'checkbox',\n      selected: this.state.selected,\n      onSelect: this.handleOnSelect,\n      onSelectAll: this.handleOnSelectAll\n      };\n    const options = {\n      sizePerPage: 20,\n      hideSizePerPage: true,\n      hidePageListOnlyOnePage: true\n      };\n    const testSuitecolumns = [\n      {\n        dataField: 'id',\n        text: '#',\n        headerStyle: { width: '50px' },\n      },\n      {\n        dataField: 'moduleName',\n        text: 'Module Name',\n        filter: textFilter()\n      },\n      {\n        dataField: 'testid',\n        text: 'Test ID',\n        filter: textFilter()\n      },\n      {\n        dataField: 'testcasename',\n        text: 'Test Case Name',\n        filter: textFilter()\n      }\n    ];\n\n  return (\n    <Page title=\"CI/CD Support\" breadcrumbs={[{ name: 'CI/CD Support', active: true }]}>\n      <Loader \n        type=\"ThreeDots\"\n        color=\"#00BFFF\"\n        height={50}\n        width={100}\n        timeout={120000} //3 secs\n        visible = {this.state.loader}\n      />\n      <Row>\n        <Col lg={12} md={6} sm={6} xs={12}>\n          <Card>\n            <CardHeader>\n              <CardImg\n            className=\"card-img-right\"\n              src={CICDImage}\n              style={{ width: 'auto', height: 100 }}\n              />\n            </CardHeader>\n          </Card>\n        </Col>\n        <Col lg={6} md={6} sm={6} xs={12}>\n          <Card>\n            <CardHeader>API Regression Suite</CardHeader>\n              <CardBody>\n                <Form >\n                <FormGroup col>\n                  <Label for=\"exampleSelect\" sm={6}>\n                    Environment*\n                  </Label>\n                  <Col>\n                    <Input disabled={this.state.pageloadingStatus} type=\"select\" name=\"envlist\" value={this.state.RegressionENV} onChange={this.updateRegressionENV.bind(this)}>\n                      <GetAllEnvName options={this.state.EnvName} />\n\t\t\t\t\t          </Input>\n                  </Col>\n                </FormGroup>\n                  <FormGroup col>\n\t\t\t\t            <Label for=\"exampleSelect\" sm={6}>\n                      Execution Suite Name*\n                    </Label>\n                    <Col >\n                      <Input disabled={this.state.pageloadingStatus} type=\"select\" name=\"testsuitename\" value={this.state.apiTestSuiteName} onChange={this.updateAPITestSuite.bind(this)}>\n                      <option>RegressionSuite</option>\n                      <GetAllCDCDSuite options={this.state.allCICDSuite} />\n                      </Input>\n                    </Col>\n                   </FormGroup>\n                   <FormGroup col>\n\t\t\t\t            <Label for=\"exampleSelect\" sm={6}>\n                      Execution API\n                    </Label>\n                    <Col disabled =\"disabled\"> \n                    <Input disabled={this.state.pageloadingStatus} readOnly  value ={this.state.cicdAPI}></Input>\n                    </Col>\n                  </FormGroup>\n                </Form>\n            </CardBody>\n          </Card>\n        </Col>\n        <Col lg={6} md={6} sm={6} xs={12}>\n          <Card>\n            <CardHeader>Create Your Custom Test Suite</CardHeader>\n              <CardBody>\n                <Form >\n                  <FormGroup col>\n\t\t\t\t            <Label for=\"exampleSelect\" sm={6}>\n                      Execution Suite Name*\n                    </Label>\n                    <Col >\n                    <Combobox disabled={this.state.pageloadingStatus} name =\"newTestSuite\" \n                      value={this.state.NewTestSuite}\n                      data={GetListvalueFromJsonResponce(this.state.allCICDSuite)}\n                      caseSensitive={false}\n                      minLength={3}\n                      filter='contains'\n                     // onSelect={this.updateRegressionSuite.bind(this)}\n                      onChange={this.updateRegressionSuite.bind(this)}\n                    />\n                    </Col>\n                   </FormGroup>\n                </Form>\n                <Form>\n                <FormGroup col>\n                  <Label for=\"exampleSelect\" sm={5}>\n                    Email Trigger*\n                  </Label>\n                  <Col>\n                    <Input disabled={this.state.pageloadingStatus} type=\"select\" name=\"email\"  value={this.state.EmailTrigger} onChange={this.updateEmailOption.bind(this)}>\n\t\t\t\t\t            <option>YES</option>\n                      <option>NO</option>\n\t\t\t\t\t          </Input>\n                  </Col>\n                </FormGroup>\n\t\t\t\t       <FormGroup col>\n\t\t\t          \t<Label for=\"exampleSelect\" sm={5}>\n                    From Email\n                  </Label>\n                  <Col >\n                    <Input disabled={this.state.pageloadingStatus} invalid={this.state.checkFromEmai} type=\"input\" value={this.state.FromEmail} onChange={this.UpdateFromEmail.bind(this)} type=\"input\" name=\"fromemail\" placeholder=\"enter your Email Address\"/>\n                    <FormFeedback>\n                      {this.state.feedbackFromEmail}\n                    </FormFeedback>\n                  </Col>\n                </FormGroup>{' '}\n\t\t\t\t      <FormGroup col>\n\t\t\t        \t<Label for=\"exampleSelect\" sm={5}>\n                    Password\n                  </Label>\n                  <Col >\n                    <Input disabled={this.state.pageloadingStatus} invalid={this.state.checkPassword} type=\"password\" value={this.state.FromPassword} onChange={this.UpdatePassword.bind(this)} name=\"fromPassword\" placeholder=\"enter your Password\"/>\n                    <FormFeedback>\n                      {this.state.feedbackFromPassword}\n                    </FormFeedback>\n                  </Col>\n                </FormGroup>{' '}\n\t\t\t\t      <FormGroup col>\n\t\t\t\t        <Label for=\"exampleSelect\" sm={5}>\n                    Receiver Email\n                  </Label>\n                 <Col >\n                    <Input disabled={this.state.pageloadingStatus} invalid={this.state.checkRecemail} type=\"input\" value={this.state.ReceiverEmail} onChange={this.UpdateRecieverEmail.bind(this)} name=\"receiveremail\" placeholder=\"enter your Receiver email\"/>\n                    <FormFeedback>\n                      {this.state.feedbackRecieverEmail}\n                    </FormFeedback>\n                  </Col>\n                </FormGroup>{' '}\n              </Form>\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n      <Row>\n\t  \t<Col lg={12} md={6} sm={6} xs={12}>\n          <Card>\n            <CardHeader>Test Suite*\n            <Button disabled={this.state.pageloadingStatus} color=\"primary\" onClick={this.SaveTestSuite.bind(this)} name =\"saveTestScript\">Save Test Suite</Button>\n            <Button disabled = {!this.state.LoadScriptButtonenabled} onClick={this.LoadallTestscripts.bind(this)} name =\"loadTestSuite\" color=\"primary\">Load Test Scripts</Button>\n              <Loader \n                type=\"ThreeDots\"\n                color=\"#00BFFF\"\n                height={30}\n                width={100}\n                timeout={120000} //3 secs\n                visible = {this.state.loaderLoadTestScripts}\n              />\n               <Modal\n                      isOpen={this.state.modal}\n                      toggle={this.toggle()}\n                      className={this.props.className}>\n                      <ModalHeader  toggle={this.toggle()}> Information</ModalHeader>\n                      <ModalBody >\n                        {this.state.modalValidationText}\n                      </ModalBody>\n                      <ModalFooter>\n                        <Button color=\"secondary\" onClick={this.toggle()}>\n                          OK\n                        </Button>\n                      </ModalFooter>\n            </Modal>\n              \n            </CardHeader>\n            <CardBody>\n            <BootstrapTable\n              keyField=\"id\"\n              data={ this.state.testSuiteData }\n              columns={ testSuitecolumns }\n              striped\n              hover\n              condensed\n              pagination={ paginationFactory(options) }\n              selectRow={ selectRow }\n              filter={ filterFactory() }\n            />\n            </CardBody>\n          </Card>\n        </Col>\t\t\t\n    </Row>\n    </Page>\n    );\n  }\n};\n\nexport default CICDSupport;\n"],"sourceRoot":""}